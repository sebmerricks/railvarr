% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stop_if_not.R
\name{check_df}
\alias{check_df}
\title{Check Data Frame Columns}
\usage{
check_df(data, names, types, allow_extra = TRUE)
}
\arguments{
\item{data}{The data frame to be checked.}

\item{names}{A character vector specifying the expected column names.}

\item{types}{A list of data types corresponding to the expected types of the
data frame columns.}

\item{allow_extra}{Logical; if TRUE (default), allows additional columns in
the data frame beyond the specified names. If FALSE, any extra columns will
trigger an error.}
}
\description{
This function validates and checks the columns of a given data frame against
specified column names and types. It ensures that the data frame columns
match the expected names and data types.
}
\details{
The function performs column validation for the given data frame
\code{data} by comparing its columns against the expected \code{names} and \code{types}.
The goal is to ensure that the data frame's structure matches the provided
specifications. The following scenarios are considered during the
validation process:
\itemize{
\item{If the number of columns in \code{data} is greater than the number of
specified \code{names} and \code{types}, the function will allow extra columns if
\code{allow_extra = TRUE}. Otherwise, an error will be thrown, indicating that
there are too many columns.}
\item{If the number of columns in \code{data} is less than the number of
specified \code{names} and \code{types}, the function will truncate both \code{names} and
\code{types} to the length of \code{data}.}
\item{If the length of \code{names} is greater than the length of \code{types},
\code{types} will be elongated with a generic type that will match any column.}
\item{If the length of \code{names} is less than the length of \code{types}, \code{types}
will be truncated to match \code{names}}
}
The function uses the \link{vetr} package for validation.
}
\examples{
# Set up the data frame to be checked
data <- dplyr::tribble(
  ~a, ~b, ~c,
  1, "a", 4
)

# Define the expected names and types
names <- c("a", "b", "c")
types <- list(integer(), character(), numeric())

# Check data
check_df(data, names, types)

}
\seealso{
\code{\link[vetr:vet]{vetr::vet()}}
}
