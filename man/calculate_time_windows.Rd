% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/centrix-windows.R
\name{calculate_time_windows}
\alias{calculate_time_windows}
\title{Calculate train journey intervals}
\usage{
calculate_time_windows(aspect_events, track_events, asset_map)
}
\arguments{
\item{aspect_events}{A data frame containing pre-processed aspect events with
columns:
\itemize{
\item{\code{signal}} \code{\link[=character]{character()}} signal ID.
\item{\code{dt}} \code{\link[lubridate:posix_utils]{lubridate::POSIXct()}} datetime.
\item{\code{aspect}} \code{\link[=factor]{factor()}} signal aspect after train enters the signal
section.
\item{\code{past_aspect}} \code{\link[=factor]{factor()}} signal aspect before train enters the
signal section.
}}

\item{track_events}{A data frame containing pre-processed track events with
columns:
\itemize{
\item{\code{track}} \code{\link[=character]{character()}} track ID.
\item{\code{dt}} \code{\link[lubridate:posix_utils]{lubridate::POSIXct()}} datetime.
\item{\code{occcupied}} \code{\link[=logical]{logical()}} TRUE if train enters track, else FALSE.
\item{\code{event}} \code{\link[=character]{character()}} 'enters' if train enters track, else
'vacates'.
}}

\item{asset_map}{A data frame containing a 1-1 mapping from signals to berths
and a 1-many mapping from berths to tracks. The map also contains a 1-many
mapping from tracks to events, reflecting the fact that there is an 'enter'
and a 'vacate' event for each track. Therefore, the data frame should
adhere to the following structure:
\itemize{
\item{\code{signal}}: A \code{\link[=character]{character()}} vector containing the signal ID. It
should follow the regex pattern \code{"S[0-9]+"}.
\item{\code{berth}}: A \code{\link[=character]{character()}} vector containing the berth ID. It
should follow the regex pattern \code{"[A-Z]+"}.
\item{\code{track}}: A \code{\link[=character]{character()}} vector containing the track ID. It
should follow the regex pattern \code{"T[A-Z]+(-[0-9])?"}.
\item{\code{event}}: A \code{\link[=character]{character()}} vector containing the event type. It
must be one of either "enters" or "vacates".
}}
}
\value{
A data frame containing window IDs and time intervals in the
columns:
\itemize{
\item{\code{window}} \code{\link[=numeric]{numeric()}} window ID.
\item{\code{interval}} \code{\link[lubridate:interval]{lubridate::interval()}} time intervals.
}
Each window indicates a time interval in which the data contain valid
observations.
}
\description{
Calculates a set of time intervals containing valid Centrix observations.
These observations correspond to distinct / interlaced train journeys.
}
\details{
A train journey across the track section begins as the train enters
the first track specified in the \code{asset_map} and ends when the train
vacates the last. If the next train to pass through is sufficiently far
behind, there will be some period of time where the track is empty -
between the first train leaving the last track and the next train entering
the first track. Therefore, any events that occur in this time are invalid
and are discarded.

The time windows that this function identifies are the inverse of the
previous intervals, defining the time periods that trains are present in
the track section. The events within these windows are validated by the
number of signals/tracks, the number of events, and the number of trains.
Only valid journeys are returned, which can result in data loss of around
1\%.
}
\examples{
data(aspect_events, track_events, asset_map)
time_windows <- calculate_time_windows(aspect_events,
                                       track_events,
                                       asset_map)
time_windows

}
\seealso{
\code{\link[=wrangle_centrix]{wrangle_centrix()}} \code{\link[=preprocess_signal_events]{preprocess_signal_events()}} \link{aspect_events}
\link{track_events} \link{asset_map} \link{time_windows}
}
