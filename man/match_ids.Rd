% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matching.R
\name{match_ids}
\alias{match_ids}
\title{Match Centrix and Timetable IDs}
\usage{
match_ids(berth_events_groups, timetable_groups, match_mapping)
}
\arguments{
\item{berth_events_groups}{Data frame containing berth-level Centrix data.
The structure is expected to conform to the following:
\itemize{
\item{\code{berth}}{\code{\link[=character]{character()}} Berth ID}
\item{\code{train_id}}{\code{\link[=numeric]{numeric()}} Train ID}
\item{\code{t_enters}}{\code{\link[lubridate:posix_utils]{lubridate::POSIXct()}} Date and time that the train
enters the berth}
\item{\code{t_vacates}}{\code{\link[lubridate:posix_utils]{lubridate::POSIXct()}} Date and time that the train
vacates the berth}
\item{\code{group}}{\code{\link[=character]{character()}} Group name, corresponding to the train's
calling pattern}
}}

\item{timetable_groups}{Data frame containing Timetable data. The structure
is expected to conform to the following:
\itemize{
\item{\code{train_header}}{\code{\link[=character]{character()}} Train ID}
\item{\code{dt_origin}}{\code{\link[lubridate:posix_utils]{lubridate::POSIXct()}} Date and time that the service
originated}
\item{\code{group}}{\code{\link[=character]{character()}} Group name, corresponding to the train's
calling pattern}
\item{\code{geo}}{\code{\link[=character]{character()}} Name of TIPLOCs that trains pass through or
stop at}
\item{\code{event}}{\code{\link[=character]{character()}} Type of timetable event, every element must
be one of 'Arrive', 'Depart', or 'Pass'}
\item{\code{wtt}}{\code{\link[lubridate:posix_utils]{lubridate::POSIXct()}} Scheduled date and time of event}
\item{\code{t}}{\code{\link[lubridate:posix_utils]{lubridate::POSIXct()}} Actual date and time of event}
}}

\item{match_mapping}{Data frame containing instructions for the matching. It
should match the following structure:
\itemize{
\item{\code{group}}{\code{\link[=character]{character()}} Group name, corresponding to the train's
calling pattern}
\item{\code{berth}}{\code{\link[=character]{character()}} Berth ID}
\item{\code{geo}}{\code{\link[=character]{character()}} Name of TIPLOC(s) or station(s) to match at}
\item{\code{lb}}{\code{\link[=numeric]{numeric()}} Number of seconds to shift the start of the
matching window}
\item{\code{ub}}{\code{\link[=numeric]{numeric()}} Number of seconds to shift the end of the
matching window}
}}
}
\value{
Data frame containing a 1-1 mapping between Centrix IDs and
Timetable IDs.
}
\description{
\code{match_ids()} matches Centrix observations with timetabling
information. The result is a data set that contains a 1-1 mapping between
Centrix IDs and timetable IDs. This is a necessary step because the timings
used in the timetable are rounded to the nearest 30 seconds, resulting in
much lower granularity. There may also be other inaccuracies with the
timetable. This function results in data loss, the amount of which depends
on how accurate the matching needs to be.
}
\details{
There are two methods for matching Centrix data with timetable data.
The method that is used depends on whether the train is a fast train (does
not stop at any stations present in the Centrix data set) or not.

For fast trains, matches must be found at the nearest TIPLOC, e.g., a
junction preceding the Centrix track section. For these trains, the \code{lb}
and \code{ub} columns of the \code{match_mapping} control what is considered a match.
If the train passed through the junction at time \code{t_Pass} and the train
entered the Centrix track at time \code{t_enters}, a match is made if: \cr
\code{t_Pass > t_enters + lb & t_Pass < t_enters + ub} \cr I.e., a match is made
if the train passed through the junction less than \code{lb} seconds before
\code{t_enters} (assuming that \code{lb} is negative) and if the train passed through
the junction earlier than \code{t_enters + ub}. Thus, \code{lb} and \code{ub} define a
time window based on \code{t_enters} in which \code{t_Pass} must occur for a match to
be made.

For stopping trains, matches can be made at stations, which is conceptually
simpler. Let's take the example of a train which stops at only one station.
The train enters the station's berth at time \code{t_enters}, arrives at the
station at \code{t_Arrive}, departs the station at \code{t_Depart} and vacates the
berth at time \code{t_vacates}. A match is made if: \cr \code{t_enters + lb < t_Arrive & t_Depart < t_vacates + ub} \cr I.e., a match is made if the
train arrives at the station after it enters the berth and if the train
departs the station before it vacates the berth. Similar to the fast
trains, \code{t_enters} and \code{t_vacates} define a time window in which \code{t_Arrive}
and \code{t_Depart} must occur for a match to be made. This window can be
adjusted using \code{lb} and \code{ub}.
}
\examples{
# Define the matching instructions
data(berth_events_groups, timetable_subset)
match_mapping <- dplyr::tribble(
  ~group, ~berth, ~geo, ~lb, ~ub,
  # match fast trains at berth "A" and geo "geo6"
  # move start of window 240 seconds before `t_enters`
  # move end of window 60 seconds after `t_enters`
  "fast", "A", "geo6", -240, 60,
  # match stopping-all trains at berths "A","D","F", and geos "geo110","geo111","geo112"
  # don't adjust window
  "stopping-all", "A", "geo110", 0, 0,
  "stopping-all", "D", "geo111", 0, 0,
  "stopping-all", "F", "geo112", 0, 0
)

timetable_groups <- dplyr::filter(timetable_subset,
                                  event \%in\% c("Arrive", "Depart", "Pass"))

matched_ids <- match_ids(berth_events_groups, timetable_groups, match_mapping)
matched_ids

match_mapping <- dplyr::tribble(
  ~group, ~berth, ~geo, ~lb, ~ub,
  "fast", "A", "geo6", -240, 60,
  # move start of window for stopping-all trains to 60 seconds before `t_enters`
  "stopping-all", "A", "geo110", -60, 0,
  "stopping-all", "D", "geo111", -60, 0,
  "stopping-all", "F", "geo112", -60, 0
)
wider_window <- match_ids(berth_events_groups, timetable_groups, match_mapping)
# More matches are found with the wider window
wider_window

}
\seealso{
\code{\link[=cluster_journeys]{cluster_journeys()}} \code{\link[=wrangle_timetable]{wrangle_timetable()}}
\code{\link[=calculate_journey_specifications]{calculate_journey_specifications()}} \code{\link[=estimate_berth_lengths]{estimate_berth_lengths()}}
\link{id_matching}
}
