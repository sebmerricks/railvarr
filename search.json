[{"path":"https://sebmerricks.github.io/railvarr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 railvarr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"railvarr","text":"vignette guide railvarr processing pipeline start finish. assumed already possession Centrix timetable data. railvarr provides functionality reading raw data. Instead, massage data match description raw_centrix wrangle_centrix() timetable wrangle_timetable().","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"overview","dir":"Articles","previous_headings":"Centrix","what":"Overview","title":"railvarr","text":"Railway tracks separated distinct blocks, called berths. berths protected signals. example, train berth D signals using 4-aspect system.  berth made one track sections, fitted track circuits. track circuits detect presence absence trains, triggering changes signalling system. Centrix data comes state transitions caused train movements, detected track circuits.  Note small offset train entering berth signal changing red. also offset train vacating berth signal changing yellow. Centrix observations derived events follows: track (denoted \" TR\" suffix asset ID) transitions come track circuits. Therefore, \"DN\" denotes train entering track, \"DN \" denotes train vacating track. Signal transitions different, \"DN\" representing change state, \"DN \" represents change state. Therefore, second observation says signal S1 changed green (DGE) time 1. third observation correspondingly says signal S1 changed red (RGE) time 1. signal state (corresponds aspect) embedded suffix asset ID.","code":"#> # A tibble: 7 × 3 #>   asset     dt transition #>   <chr>  <dbl> <chr>      #> 1 D TR       0 UP to DN   #> 2 S1 DGE     1 UP to DN   #> 3 S1 RGE     1 DN to UP   #> 4 E TR      40 UP to DN   #> 5 D TR      50 DN to UP   #> 6 S1 RGE    55 UP to DN   #> 7 S1 HGE    55 DN to UP"},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"processing","dir":"Articles","previous_headings":"Centrix","what":"Processing","title":"railvarr","text":"railvarr provides number functions facilitate processing Centrix data. functions wrapped function wrangle_centrix(). See specific function documentation details. wrangle_centrix() requires raw Centrix data described previous section, well map track sections interest. map specifies signals, tracks, berths make section. Since berths can contain one track one signal, map provides 1-1 mapping signal berth, 1-many mapping berth track. map also contains column named event, represents fact train can enter vacate track. allows finer control start end track section. example, wanted access time train entered berth E, include 'enters' event berth E map. map previous example berths C E follows: Note don’t need include berth C map unless wanted access time train vacated berth. process 7 observations derived example, map sufficient. representation network map limited, can handle linear sections track, travelling single direction. complex track layouts junctions supported. raw_centrix data frame along asset_map, can process data using: can access example data sets running data(raw_centrix, asset_map). can see, resulting data frame contains timings saw earlier: t_enters: time train enters berth t_red_on: time signal changes red t_enters_next: time train enters next berth t_vacates: time train vacates berth t_red_off: time signal changes red aspect column gives signal aspect train saw entered berth. previous example, train saw green (G) aspect entered berth D. processed data frame contains calculated durations well timings. durations derived TSAR, equal t_red_off - t_red_on. TSAR stands ‘Time Signal Red’ represents amount time (seconds) signal spent red aspect. durations calculated : T_onset: t_red_on - t_enters time train entering berth signal changing red T_clear: t_vacates - t_enters time taken train completely clear berth T_offset: t_red_off - t_vacates time train vacating berth signal changing red T_travel: t_enters_next - t_enters time taken train travel length berth T_coach: t_vacates - t_enters_next time taken train travel length wrangle_centrix() also performs data validation, potentially resulting loss around 5% data points. However, necessary ensure resulting journeys contain valid data. part , function identifies individual train journeys, labeling train unique ID number.","code":"#> # A tibble: 3 × 4 #>   signal berth track event   #>   <chr>  <chr> <chr> <chr>   #> 1 S1     D     TD    enters  #> 2 S1     D     TD    vacates #> 3 S2     E     TE    enters data(raw_centrix, asset_map) raw_centrix #> # A tibble: 110,339 × 3 #>    asset   dt                  transition #>    <chr>   <dttm>              <chr>      #>  1 TA-1 TR 2000-01-01 06:13:48 UP to DN   #>  2 S1 HHGE 2000-01-01 06:13:49 UP to DN   #>  3 S1 HGE  2000-01-01 06:13:49 UP to DN   #>  4 S1 RGE  2000-01-01 06:13:49 DN to UP   #>  5 TA-1 TR 2000-01-01 06:25:29 DN to UP   #>  6 TA-1 TR 2000-01-01 06:25:31 UP to DN   #>  7 TA-1 TR 2000-01-01 06:25:43 DN to UP   #>  8 S1 HHGE 2000-01-01 06:25:48 DN to UP   #>  9 S1 HGE  2000-01-01 06:25:48 DN to UP   #> 10 S1 RGE  2000-01-01 06:25:48 UP to DN   #> # ℹ 110,329 more rows asset_map #> # A tibble: 17 × 4 #>    signal berth track event   #>    <chr>  <chr> <chr> <chr>   #>  1 S1     A     TA-1  enters  #>  2 S1     A     TA-2  vacates #>  3 S2     B     TB-1  enters  #>  4 S2     B     TB-2  vacates #>  5 S3     C     TC-1  enters  #>  6 S3     C     TC-2  vacates #>  7 S4     D     TD    enters  #>  8 S4     D     TD    vacates #>  9 S5     E     TE    enters  #> 10 S5     E     TE    vacates #> 11 S6     F     TF-1  enters  #> 12 S6     F     TF-2  vacates #> 13 S7     G     TG-1  enters  #> 14 S7     G     TG-2  vacates #> 15 S8     H     TH    enters  #> 16 S8     H     TH    vacates #> 17 S9     I     TI    enters railvarr::wrangle_centrix(raw_centrix, asset_map) #> # A tibble: 6,952 × 15 #>    signal berth train_id aspect t_enters            t_red_on            #>    <chr>  <chr>    <int> <fct>  <dttm>              <dttm>              #>  1 S1     A            1 G      2000-01-01 13:07:11 2000-01-01 13:07:12 #>  2 S2     B            1 G      2000-01-01 13:09:18 2000-01-01 13:09:19 #>  3 S3     C            1 G      2000-01-01 13:09:58 2000-01-01 13:09:59 #>  4 S4     D            1 G      2000-01-01 13:10:41 2000-01-01 13:10:42 #>  5 S5     E            1 G      2000-01-01 13:12:39 2000-01-01 13:12:39 #>  6 S6     F            1 G      2000-01-01 13:13:18 2000-01-01 13:13:19 #>  7 S7     G            1 G      2000-01-01 13:15:35 2000-01-01 13:15:35 #>  8 S8     H            1 G      2000-01-01 13:16:19 2000-01-01 13:16:20 #>  9 S1     A            2 G      2000-01-01 13:11:58 2000-01-01 13:11:59 #> 10 S2     B            2 YY     2000-01-01 13:12:43 2000-01-01 13:12:43 #> # ℹ 6,942 more rows #> # ℹ 9 more variables: t_enters_next <dttm>, t_vacates <dttm>, t_red_off <dttm>, #> #   TSAR <dbl>, T_onset <dbl>, T_clear <dbl>, T_offset <dbl>, T_travel <dbl>, #> #   T_coach <dbl>"},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"clustering","dir":"Articles","previous_headings":"Centrix","what":"Clustering","title":"railvarr","text":"Centrix data contains information stopping patterns. However, can deduced travel times. can see following plot, obvious differences travel times berths contain stations.  differences can categorised using K-means clustering. automated function cluster_journeys(). data set contains 3 distinct groups trains, can specified using centers parameter.  K-means clustering stochastic algorithm, results cluster_journeys() occasionally expected. case, simply run clustering . trains may also miscategorised. can diagnosed visually using plot_clusters(), unfortunately manual process remedy issue.","code":"berth_events_clusters <- cluster_journeys(berth_events,                                           centers = 3L,                                           iter.max = 40L) plot_clusters(berth_events_clusters)"},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"processing-1","dir":"Articles","previous_headings":"Timetable","what":"Processing","title":"railvarr","text":", railvarr provides functionality reading raw data. Therefore, first step make sure data lines railvarr expects. timetable list events. event belongs train, denoted headcode (train_header) time date originated (dt_origin). event also takes place geographical location, commonly known TIPLOC. railvarr timetables, TIPLOCs live geo column. also type event, contained event column. event can one following types: Pass train passes without stopping Arrive train arrives station Depart train departs station Originate train originates Terminate train terminate event scheduled time (wtt) actual time (t), well delay (delay) simply difference actual scheduled times. column named allow, used timetabled delay allowance. commonly used ECS trains (headcode starts ‘5’) often incur delays waiting passenger services. allowance means delays can expected aren’t necessarily problematic. information expected structure raw timetable, see wrangle_timetable(). timetable correct structure, can go ahead use wrangle_timetable() function. function wraps three processing functions: filter_relevant_services() filter_relevant_direction() find_calling_patterns() two extra parameters required wrangle_timetable(): stations stopping_stations. stations list TIPLOCs (geo) trains pass. list used work trains travel track section interest. example, fork track, trains can travel left right. want look trains turn left, stations include TIPLOCs interest situated along left track. trains pass TIPLOCs specified stations discarded. stopping_stations subset stations, specifies TIPLOCs trains can stop . used calculating calling patterns. Therefore, train stop stations specified stopping_stations labeled ‘fast’ train. Trains stop stations labeled ‘stopping-’, specific stations stop attached suffixes. example, train stops ‘geo10’, calling pattern labeled ‘stopping-geo10’.","code":"# Load example data from railvarr data(timetable, stations, stopping_stations) # Raw timetable: note the number of observations and that none of the TIPLOCs  # (`geo`) appear in the list of stations timetable #> # A tibble: 8,958 × 11 #>    train_header dt_origin           geo    event     wtt                 #>    <chr>        <dttm>              <chr>  <chr>     <dttm>              #>  1 168H         2000-01-01 12:05:00 geo1   Originate 2000-01-01 12:20:00 #>  2 168H         2000-01-01 12:05:00 geo18  Arrive    2000-01-01 12:23:00 #>  3 168H         2000-01-01 12:05:00 geo18  Depart    2000-01-01 12:24:00 #>  4 168H         2000-01-01 12:05:00 geo2   Arrive    2000-01-01 12:28:00 #>  5 168H         2000-01-01 12:05:00 geo2   Depart    2000-01-01 12:29:00 #>  6 168H         2000-01-01 12:05:00 geo3   Arrive    2000-01-01 12:35:30 #>  7 168H         2000-01-01 12:05:00 geo3   Depart    2000-01-01 12:36:30 #>  8 168H         2000-01-01 12:05:00 geo104 Arrive    2000-01-01 12:39:00 #>  9 168H         2000-01-01 12:05:00 geo104 Depart    2000-01-01 12:39:30 #> 10 168H         2000-01-01 12:05:00 geo4   Arrive    2000-01-01 12:41:30 #> # ℹ 8,948 more rows #> # ℹ 6 more variables: t <dttm>, delay <dbl>, allow <dbl>, allow_perf <dbl>, #> #   allow_path <dbl>, allow_eng <dbl> # List of TIPLOCs defining the track section of interest stations #> [[1]] #> [1] \"geo5\" #>  #> [[2]] #> [1] \"geo6\" #>  #> [[3]] #> [1] \"geo110\" #>  #> [[4]] #> [1] \"geo111\" #>  #> [[5]] #> [1] \"geo112\" #>  #> [[6]] #> [1] \"geo7\" \"geo8\" # List of stations in the track section at which trains stop stopping_stations #> [[1]] #> [1] \"geo110\" #>  #> [[2]] #> [1] \"geo111\" #>  #> [[3]] #> [1] \"geo112\" # Processed timetable: not how few observations persist, fewer than 10%; note  # also that all the TIPLOCs apear in stations railvarr::wrangle_timetable(timetable, stations, stopping_stations) #> # A tibble: 792 × 12 #>    train_header dt_origin           geo    event  wtt                 #>    <chr>        <dttm>              <chr>  <chr>  <dttm>              #>  1 108H         2000-01-01 12:55:00 geo5   Arrive 2000-01-01 13:34:00 #>  2 108H         2000-01-01 12:55:00 geo5   Depart 2000-01-01 13:35:30 #>  3 108H         2000-01-01 12:55:00 geo6   Pass   2000-01-01 13:37:30 #>  4 108H         2000-01-01 12:55:00 geo110 Arrive 2000-01-01 13:39:00 #>  5 108H         2000-01-01 12:55:00 geo110 Depart 2000-01-01 13:39:30 #>  6 108H         2000-01-01 12:55:00 geo111 Arrive 2000-01-01 13:42:00 #>  7 108H         2000-01-01 12:55:00 geo111 Depart 2000-01-01 13:42:30 #>  8 108H         2000-01-01 12:55:00 geo112 Arrive 2000-01-01 13:44:30 #>  9 108H         2000-01-01 12:55:00 geo112 Depart 2000-01-01 13:45:00 #> 10 108H         2000-01-01 12:55:00 geo7   Arrive 2000-01-01 13:48:00 #> # ℹ 782 more rows #> # ℹ 7 more variables: t <dttm>, delay <dbl>, allow <dbl>, allow_perf <dbl>, #> #   allow_path <dbl>, allow_eng <dbl>, group <chr>"},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"specifications","dir":"Articles","previous_headings":"Timetable","what":"Specifications","title":"railvarr","text":"can use scheduled times timetable calculate long take travel along track. can calculated using calculate_journey_specifications(). can useful know expected journey times, example inform ID matching process. function requires timetable list stations calculate journey specifications. Using example dataset, can use following list stations: list encompasses track section contained Centrix data. However, can alter however like.","code":"#> [[1]] #> [1] \"geo6\" #>  #> [[2]] #> [1] \"geo110\" #>  #> [[3]] #> [1] \"geo111\" #>  #> [[4]] #> [1] \"geo112\" #>  #> [[5]] #> [1] \"geo7\""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"overview-1","dir":"Articles","previous_headings":"ID Matching","what":"Overview","title":"railvarr","text":"Although possible analyse Centrix timetable data current, processed form, analysis can performed combining two datasets. , Centrix train journeys must matched timetabled journeys. fuzzy process, times timetables rounded nearest 15/30 seconds. example dataset, times rounded nearest 30 seconds. Furthermore, Centrix journeys may present timetable vice-versa. result issues, ID matching process can result lot data loss. recommended manually check results outliers mismatches. ID matching uses fact berths Centrix data line TIPLOCs timetable. example dataset, berth corresponds TIPLOC geo110 represents station. berths TIPLOCs make use depends train’s stopping pattern. train stops geo110 nowhere else can matched station. trains likely include information timetable. TIPLOCs (therefore berths) included timetable usually junctions (Pass event) stations train stops (one Arrive one Depart event). can Pass events, guaranteed.","code":""},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"match_mapping","dir":"Articles","previous_headings":"ID Matching","what":"match_mapping","title":"railvarr","text":"can specify perform ID matching using match_mapping parameter. data frame 5 columns: group: train group, e.g. ‘fast’ ‘stopping-’ berth: berth match, e.g. berth ‘’ geo: TIPLOC match, e.g. ‘geo110’ lb ub columns lb ub dictate matching tolerance. order understand work, understand algorithm inside constitutes match. Centrix data, two important timings matching: t_enters t_vacates. t_enters train entered berth t_vacates train vacated berth. timetable, two slightly diferent timtings: t_Arrive t_Depart. t_Arrive time train arrived station t_Depart time train departed station. can say Centrix observation timetable observation match train entered berth arriving station train vacated berth departing station: t_enters < t_Arrive & t_Depart < t_vacates Conceptually, t_enters t_vacates define window time t_Arrive t_Depart must exist order match made. Due inherent fuzziness timetable observations, may wish extend shrink time window. done using two previously mentioned columns: lb ub. used alter previous expression follows: t_enters + lb < t_Arrive & t_Depart < t_vacates + ub Therefore, want match trains group ‘stopping-geo110’, can use following match_mapping: want generate matches, can extend time window 30 seconds directions using following edited match_mapping: general, recommended start restrictive time windows, extending want data matching. However, ID matching can result significant data loss, can expect increase matching tolerance extending matching time window using lb ub.","code":"#> # A tibble: 1 × 5 #>   group           berth geo       lb    ub #>   <chr>           <chr> <chr>  <dbl> <dbl> #> 1 stopping-geo110 A     geo110     0     0 #> # A tibble: 1 × 5 #>   group           berth geo       lb    ub #>   <chr>           <chr> <chr>  <dbl> <dbl> #> 1 stopping-geo110 A     geo110   -30    30"},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"fast-trains","dir":"Articles","previous_headings":"ID Matching","what":"Fast trains","title":"railvarr","text":"far, considered stopping trains, can matched stations using t_Arrive t_Depart. However, fast trains stop definition. Yet, still pass various TIPLOCs (usually junctions) t_Pass timing. example dataset, trains pass junction just entering track section. Therefore, fast trains t_Pass timing occurs prior entry Centrix track section. order make use , necessary know long take train travel junction first Centrix berth. can found using calculate_journey_specifications() function. matching expression fast trains slightly different: t_enters + lb < t_Pass & t_Pass < t_enters + ub Essentially, match can made timetable observation occurs -t_enters + lb t_enters + ub. Therefore, can use lb ub specify exact time window match can occur. example dataset, take 4 minutes (240 seconds) travel junction berth . Therefore, can set lb = -240 say t_Pass occur 240 seconds t_enters. can use ub specify end window. example, want relatively high tolerance, can set ub = 60. says t_Pass can occur 60 seconds t_enters. match_mapping : Note ‘geo6’ refers junction prior Centrix berths. can play around lb ub results look right . match_mapping include details train groups. example, combining fast stoping-geo110 trains result following match_mapping:","code":"#> # A tibble: 1 × 5 #>   group berth geo      lb    ub #>   <chr> <chr> <chr> <dbl> <dbl> #> 1 fast  A     geo6   -240    60 #> # A tibble: 2 × 5 #>   group           berth geo       lb    ub #>   <chr>           <chr> <chr>  <dbl> <dbl> #> 1 stopping-geo110 A     geo110   -30    30 #> 2 fast            A     geo6    -240    60"},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"clustering-1","dir":"Articles","previous_headings":"ID Matching","what":"Clustering","title":"railvarr","text":"ID matching makes use train groups, Centrix clustering pre-requisite. See cluster_journeys(). make sure label clusters match calling patterns timetable.","code":""},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"dwell-times","dir":"Articles","previous_headings":"","what":"Dwell Times","title":"railvarr","text":"can useful separate travel times moving time dwell time. Dwell time analysis important stopping stations represents one largest sources variability train travel times (citation needed?).","code":""},{"path":"https://sebmerricks.github.io/railvarr/articles/railvarr.html","id":"berth-lengths","dir":"Articles","previous_headings":"Dwell Times","what":"Berth Lengths","title":"railvarr","text":"order calculate dwell times TSAR, need know trains’ velocities entering exiting berths. calculate velocities, need know berth lengths. appears berth length data can unreliable, railvarr provides function estimate lengths based expected journey time known reference length. reference length can obtained , example, measuring track length Google maps. expected journey time can obtained timetable specification. recommended look normal fast trains. function estimate_berth_lengths() finds trains scheduled journey time equal expected journey time. calculates median Centrix travel time trains berth. , berth, calculates estimated berth length using median travel time expected speed. expected speed calculated using expected journey time reference length. example dataset, track length 5.97 miles expected journey time 270 seconds.","code":"data(timetable_specification, id_matching, berth_events_groups) railvarr::estimate_berth_lengths(timetable_specification,                                  id_matching,                                  berth_events_groups,                                  expected_journey_time = 270,                                  track_length = 5.97) #> # A tibble: 8 × 6 #>   berth median_travel v.mph L.miles  L.km     L #>   <chr>         <dbl> <dbl>   <dbl> <dbl> <dbl> #> 1 A              32.9  79.6   0.727 1.17  1170. #> 2 B              25.1  79.6   0.555 0.893  893. #> 3 C              27.6  79.6   0.610 0.982  982. #> 4 D              24.7  79.6   0.546 0.879  879. #> 5 E              24.7  79.6   0.546 0.879  879. #> 6 F              28.9  79.6   0.639 1.03  1028. #> 7 G              28.9  79.6   0.638 1.03  1027. #> 8 H              24.2  79.6   0.536 0.863  863."},{"path":"https://sebmerricks.github.io/railvarr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Merricks. Author, maintainer.","code":""},{"path":"https://sebmerricks.github.io/railvarr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Merricks S (2023). railvarr: Rail Network Performance Variability Analysis. https://github.com/sebmerricks/railvarr, https://sebmerricks.github.io/railvarr/.","code":"@Manual{,   title = {railvarr: Rail Network Performance Variability Analysis},   author = {Sebastian Merricks},   year = {2023},   note = {https://github.com/sebmerricks/railvarr, https://sebmerricks.github.io/railvarr/}, }"},{"path":"https://sebmerricks.github.io/railvarr/index.html","id":"railvarr","dir":"","previous_headings":"","what":"Rail Network Performance Variability Analysis","title":"Rail Network Performance Variability Analysis","text":"goal railvarr …","code":""},{"path":"https://sebmerricks.github.io/railvarr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Rail Network Performance Variability Analysis","text":"can install development version railvarr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"sebmerricks/railvarr\")"},{"path":"https://sebmerricks.github.io/railvarr/index.html","id":"pipeline","dir":"","previous_headings":"","what":"Pipeline","title":"Rail Network Performance Variability Analysis","text":"Diagram processing pipeline railvarr provides","code":""},{"path":"https://sebmerricks.github.io/railvarr/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Rail Network Performance Variability Analysis","text":"first step massge raw data correct structure, railvarr provides reading functionality.","code":""},{"path":"https://sebmerricks.github.io/railvarr/index.html","id":"centrix","dir":"","previous_headings":"Getting Started","what":"Centrix","title":"Rail Network Performance Variability Analysis","text":"detailed overview expected Centrix data can found wrangle_centrix(). example valid Centrix data frame:","code":"data(raw_centrix) head(raw_centrix, 10) #>      asset                  dt transition #> 1  TA-1 TR 2000-01-01 06:13:48   UP to DN #> 2  S1 HHGE 2000-01-01 06:13:49   UP to DN #> 3   S1 HGE 2000-01-01 06:13:49   UP to DN #> 4   S1 RGE 2000-01-01 06:13:49   DN to UP #> 5  TA-1 TR 2000-01-01 06:25:29   DN to UP #> 6  TA-1 TR 2000-01-01 06:25:31   UP to DN #> 7  TA-1 TR 2000-01-01 06:25:43   DN to UP #> 8  S1 HHGE 2000-01-01 06:25:48   DN to UP #> 9   S1 HGE 2000-01-01 06:25:48   DN to UP #> 10  S1 RGE 2000-01-01 06:25:48   UP to DN"},{"path":"https://sebmerricks.github.io/railvarr/index.html","id":"timetable","dir":"","previous_headings":"","what":"Timetable","title":"Rail Network Performance Variability Analysis","text":"detailed overview expected Timetable data can found wrangle_timetable(). example valid Timetable data frame:","code":"data(timetable) head(timetable, 10) #>    train_header           dt_origin    geo     event                 wtt #> 1          168H 2000-01-01 12:05:00   geo1 Originate 2000-01-01 12:20:00 #> 2          168H 2000-01-01 12:05:00  geo18    Arrive 2000-01-01 12:23:00 #> 3          168H 2000-01-01 12:05:00  geo18    Depart 2000-01-01 12:24:00 #> 4          168H 2000-01-01 12:05:00   geo2    Arrive 2000-01-01 12:28:00 #> 5          168H 2000-01-01 12:05:00   geo2    Depart 2000-01-01 12:29:00 #> 6          168H 2000-01-01 12:05:00   geo3    Arrive 2000-01-01 12:35:30 #> 7          168H 2000-01-01 12:05:00   geo3    Depart 2000-01-01 12:36:30 #> 8          168H 2000-01-01 12:05:00 geo104    Arrive 2000-01-01 12:39:00 #> 9          168H 2000-01-01 12:05:00 geo104    Depart 2000-01-01 12:39:30 #> 10         168H 2000-01-01 12:05:00   geo4    Arrive 2000-01-01 12:41:30 #>                      t delay allow allow_perf allow_path allow_eng #> 1  2000-01-01 12:19:00   -60     0          0          0         0 #> 2  2000-01-01 12:23:00     0     0          0          0         0 #> 3  2000-01-01 12:24:00     0     0          0          0         0 #> 4  2000-01-01 12:27:00   -60     0          0          0         0 #> 5  2000-01-01 12:28:00   -60     0          0          0         0 #> 6  2000-01-01 12:34:00   -90    90          0          0        90 #> 7  2000-01-01 12:35:00   -90     0          0          0         0 #> 8  2000-01-01 12:38:00   -60     0          0          0         0 #> 9  2000-01-01 12:38:00   -90     0          0          0         0 #> 10 2000-01-01 12:41:00   -30     0          0          0         0"},{"path":"https://sebmerricks.github.io/railvarr/reference/aspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new aspect object — aspect","title":"Create new aspect object — aspect","text":"Create new aspect object","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/aspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new aspect object — aspect","text":"","code":"aspect(x = integer(), levels = c(\"G\", \"YY\", \"Y\", \"R\"))"},{"path":"https://sebmerricks.github.io/railvarr/reference/aspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new aspect object — aspect","text":"x Aspect levels Aspect levels","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/aspect_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Example aspect events — aspect_events","title":"Example aspect events — aspect_events","text":"example Centrix data pre-processed aspect events.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/aspect_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example aspect events — aspect_events","text":"","code":"aspect_events"},{"path":"https://sebmerricks.github.io/railvarr/reference/aspect_events.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example aspect events — aspect_events","text":"signal Signal ID dt Date time event aspect Signal aspect caused event past_aspect Signal aspect preceding event","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/aspect_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example aspect events — aspect_events","text":"data frame containing 32,512 rows 4 columns.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/aspect_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example aspect events — aspect_events","text":"","code":"aspect_events #> # A tibble: 32,512 × 4 #>    signal dt                  aspect past_aspect #>    <chr>  <dttm>              <fct>  <fct>       #>  1 S1     2000-01-01 06:13:49 R      NA          #>  2 S1     2000-01-01 06:25:48 YY     R           #>  3 S1     2000-01-01 06:25:48 Y      YY          #>  4 S1     2000-01-01 06:25:53 R      Y           #>  5 S1     2000-01-01 06:26:16 YY     R           #>  6 S1     2000-01-01 06:26:16 Y      YY          #>  7 S1     2000-01-01 07:44:16 R      Y           #>  8 S1     2000-01-01 08:06:31 YY     R           #>  9 S1     2000-01-01 08:06:31 Y      YY          #> 10 S1     2000-01-01 08:20:08 R      Y           #> # ℹ 32,502 more rows"},{"path":"https://sebmerricks.github.io/railvarr/reference/asset_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Example asset map — asset_map","title":"Example asset map — asset_map","text":"example asset map showing relationship different track assets. 1-1 mapping signal berth, 1-many mapping berth track, 1-1 mapping track event.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/asset_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example asset map — asset_map","text":"","code":"asset_map"},{"path":"https://sebmerricks.github.io/railvarr/reference/asset_map.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example asset map — asset_map","text":"signal Signal ID berth Berth ID track Track ID event Track event","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/asset_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example asset map — asset_map","text":"data frame containing 17 rows 4 columns.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/asset_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example asset map — asset_map","text":"","code":"asset_map #> # A tibble: 17 × 4 #>    signal berth track event   #>    <chr>  <chr> <chr> <chr>   #>  1 S1     A     TA-1  enters  #>  2 S1     A     TA-2  vacates #>  3 S2     B     TB-1  enters  #>  4 S2     B     TB-2  vacates #>  5 S3     C     TC-1  enters  #>  6 S3     C     TC-2  vacates #>  7 S4     D     TD    enters  #>  8 S4     D     TD    vacates #>  9 S5     E     TE    enters  #> 10 S5     E     TE    vacates #> 11 S6     F     TF-1  enters  #> 12 S6     F     TF-2  vacates #> 13 S7     G     TG-1  enters  #> 14 S7     G     TG-2  vacates #> 15 S8     H     TH    enters  #> 16 S8     H     TH    vacates #> 17 S9     I     TI    enters"},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of berth-level events — berth_events","title":"Example of berth-level events — berth_events","text":"example processed Centrix data containing TSAR sub-components.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of berth-level events — berth_events","text":"","code":"berth_events"},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_events.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of berth-level events — berth_events","text":"signal Signal ID berth Berth ID train_id Train ID aspect Signal aspect train enters berth t_enters Date time train enters berth t_red_on Date time signal aspect changes red t_enters_next Date time train enters next berth t_vacates Date time train vacates berth t_red_off Date time signal aspect changes red TSAR Amount time signal aspect set red T_onset Time train entering berth signal aspect changing red T_clear Amount time taken train fully clear berth T_offset Time train vacating berth signal aspect changing red T_travel Amount time taken train travel length berth T_coach Amount time taken train travel length","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example of berth-level events — berth_events","text":"data frame containing 6,952 rows 15 columns","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of berth-level events — berth_events","text":"","code":"berth_events #> # A tibble: 6,952 × 15 #>    signal berth train_id aspect t_enters            t_red_on            #>    <chr>  <chr>    <int> <fct>  <dttm>              <dttm>              #>  1 S1     A            1 G      2000-01-01 13:07:11 2000-01-01 13:07:12 #>  2 S2     B            1 G      2000-01-01 13:09:18 2000-01-01 13:09:19 #>  3 S3     C            1 G      2000-01-01 13:09:58 2000-01-01 13:09:59 #>  4 S4     D            1 G      2000-01-01 13:10:41 2000-01-01 13:10:42 #>  5 S5     E            1 G      2000-01-01 13:12:39 2000-01-01 13:12:39 #>  6 S6     F            1 G      2000-01-01 13:13:18 2000-01-01 13:13:19 #>  7 S7     G            1 G      2000-01-01 13:15:35 2000-01-01 13:15:35 #>  8 S8     H            1 G      2000-01-01 13:16:19 2000-01-01 13:16:20 #>  9 S1     A            2 G      2000-01-01 13:11:58 2000-01-01 13:11:59 #> 10 S2     B            2 YY     2000-01-01 13:12:43 2000-01-01 13:12:43 #> # ℹ 6,942 more rows #> # ℹ 9 more variables: t_enters_next <dttm>, t_vacates <dttm>, t_red_off <dttm>, #> #   TSAR <dbl>, T_onset <dbl>, T_clear <dbl>, T_offset <dbl>, T_travel <dbl>, #> #   T_coach <dbl>"},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_events_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of wrangled Centrix data — berth_events_groups","title":"Example of wrangled Centrix data — berth_events_groups","text":"Data frame containing wrangled Centrix data group labels calculated K-means clustering.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_events_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of wrangled Centrix data — berth_events_groups","text":"","code":"berth_events_groups"},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_events_groups.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of wrangled Centrix data — berth_events_groups","text":"signal Signal ID berth Berth ID train_id Train ID aspect Signal aspect train enters berth t_enters Date time train enters berth t_red_on Date time signal aspect changes red t_enters_next Date time train enters next berth t_vacates Date time train vacates berth t_red_off Date time signal aspect changes red TSAR Amount time signal aspect set red T_onset Time train entering berth signal aspect changing red T_clear Amount time taken train fully clear berth T_offset Time train vacating berth signal aspect changing red T_travel Amount time taken train travel length berth T_coach Amount time taken train travel length group Group name corresponding calling pattern","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_events_groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example of wrangled Centrix data — berth_events_groups","text":"data frame 6,952 rows 16 columns","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_lengths.html","id":null,"dir":"Reference","previous_headings":"","what":"Example berth lengths — berth_lengths","title":"Example berth lengths — berth_lengths","text":"example data frame containing estimated berth lengths.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_lengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example berth lengths — berth_lengths","text":"","code":"berth_lengths"},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_lengths.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example berth lengths — berth_lengths","text":"berth Berth ID median_travel Median travel time berth v.mph Expected speed across berth L.miles Estimated berth length miles L.km Estimated berth length kilometres L Estimated berth length metres","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_lengths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example berth lengths — berth_lengths","text":"data frame containing 8 rows 6 columns","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/berth_lengths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example berth lengths — berth_lengths","text":"","code":"berth_lengths #> # A tibble: 8 × 6 #>   berth median_travel v.mph L.miles  L.km     L #>   <chr>         <dbl> <dbl>   <dbl> <dbl> <dbl> #> 1 A              32.9  79.6   0.727 1.17  1170. #> 2 B              25.1  79.6   0.555 0.893  893. #> 3 C              27.6  79.6   0.610 0.982  982. #> 4 D              24.7  79.6   0.546 0.879  879. #> 5 E              24.7  79.6   0.546 0.879  879. #> 6 F              28.9  79.6   0.639 1.03  1028. #> 7 G              28.9  79.6   0.638 1.03  1027. #> 8 H              24.2  79.6   0.536 0.863  863."},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_journey_specifications.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate journey specifications — calculate_journey_specifications","title":"Calculate journey specifications — calculate_journey_specifications","text":"Uses scheduled times timetable calculate long take travel along track. Calculates journey times stations specified spec_stations parameter.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_journey_specifications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate journey specifications — calculate_journey_specifications","text":"","code":"calculate_journey_specifications(timetable, spec_stations)"},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_journey_specifications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate journey specifications — calculate_journey_specifications","text":"timetable Data frame containing timetable data. Strict input validation performed. Must data frame following columns: train_headercharacter() Train identifier dt_originlubridate::POSIXct() Datetime train originated geocharacter() Name event location eventcharacter() Type event, must contain following values: Pass, Arrive, Depart, Originate, Terminate wttlubridate::POSIXct() Scheduled datetime event tlubridate::POSIXct() Actual datetime event delaynumeric() Difference actual time scheduled time event allownumeric() Timetabled delay allowance spec_stations List stations calculate journey times.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_time_windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate train journey intervals — calculate_time_windows","title":"Calculate train journey intervals — calculate_time_windows","text":"Calculates set time intervals containing valid Centrix observations. observations correspond distinct / interlaced train journeys.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_time_windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate train journey intervals — calculate_time_windows","text":"","code":"calculate_time_windows(aspect_events, track_events, asset_map)"},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_time_windows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate train journey intervals — calculate_time_windows","text":"aspect_events data frame containing pre-processed aspect events columns: signal character() signal ID. dt lubridate::POSIXct() datetime. aspect factor() signal aspect train enters signal section. past_aspect factor() signal aspect train enters signal section. track_events data frame containing pre-processed track events columns: track character() track ID. dt lubridate::POSIXct() datetime. occcupied logical() TRUE train enters track, else FALSE. event character() 'enters' train enters track, else 'vacates'. asset_map data frame containing 1-1 mapping signals berths 1-many mapping berths tracks. map also contains 1-many mapping tracks events, reflecting fact 'enter' 'vacate' event track. Therefore, data frame adhere following structure: signal: character() vector containing signal ID. follow regex pattern \"S[0-9]+\". berth: character() vector containing berth ID. follow regex pattern \"[-Z]+\". track: character() vector containing track ID. follow regex pattern \"T[-Z]+(-[0-9])?\". event: character() vector containing event type. must one either \"enters\" \"vacates\".","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_time_windows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate train journey intervals — calculate_time_windows","text":"data frame containing window IDs time intervals columns: window numeric() window ID. interval lubridate::interval() time intervals. window indicates time interval data contain valid observations.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_time_windows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate train journey intervals — calculate_time_windows","text":"train journey across track section begins train enters first track specified asset_map ends train vacates last. next train pass sufficiently far behind, period time track empty - first train leaving last track next train entering first track. Therefore, events occur time invalid discarded. time windows function identifies inverse previous intervals, defining time periods trains present track section. events within windows validated number signals/tracks, number events, number trains. valid journeys returned, can result data loss around 1%.","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_time_windows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate train journey intervals — calculate_time_windows","text":"","code":"data(aspect_events, track_events, asset_map) time_windows <- calculate_time_windows(aspect_events,                                        track_events,                                        asset_map) time_windows #> # A tibble: 681 × 2 #>    window interval                                         #>     <int> <Interval>                                       #>  1      2 2000-01-01 13:07:11 UTC--2000-01-01 13:21:32 UTC #>  2      3 2000-01-01 13:22:09 UTC--2000-01-01 13:26:10 UTC #>  3      4 2000-01-01 13:27:43 UTC--2000-01-01 13:32:27 UTC #>  4      7 2000-01-01 14:07:06 UTC--2000-01-01 14:20:32 UTC #>  5      8 2000-01-01 14:26:30 UTC--2000-01-01 14:33:18 UTC #>  6      9 2000-01-01 14:34:54 UTC--2000-01-01 14:54:57 UTC #>  7     10 2000-01-01 15:06:54 UTC--2000-01-01 15:20:53 UTC #>  8     11 2000-01-01 15:37:57 UTC--2000-01-01 15:50:21 UTC #>  9     12 2000-01-01 16:07:15 UTC--2000-01-01 16:17:10 UTC #> 10     13 2000-01-01 16:37:04 UTC--2000-01-01 16:49:11 UTC #> # ℹ 671 more rows"},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_tsars.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate TSAR and Sub-Components. — calculate_tsars","title":"Calculate TSAR and Sub-Components. — calculate_tsars","text":"Calculate berth-level information including TSAR sub-components, e.g., T_onset, T_clear, T_offset, etc.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_tsars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate TSAR and Sub-Components. — calculate_tsars","text":"","code":"calculate_tsars(track_events, red_events, asset_map)"},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_tsars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate TSAR and Sub-Components. — calculate_tsars","text":"track_events data frame containing windowed track events. input validation performed. assumed data frame follow structure returned function filter_track_events() red_events data frame containing windowed red events. input validation performed. assumed data frame follow structure returns function filter_aspect_events() asset_map data frame containing 1-1 mapping signals berths 1-many mapping berths tracks. map also contains 1-many mapping tracks events, reflecting fact 'enter' 'vacate' event track. Therefore, data frame adhere following structure: signal: character() vector containing signal ID. follow regex pattern \"S[0-9]+\". berth: character() vector containing berth ID. follow regex pattern \"[-Z]+\". track: character() vector containing track ID. follow regex pattern \"T[-Z]+(-[0-9])?\". event: character() vector containing event type. must one either \"enters\" \"vacates\".","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_tsars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate TSAR and Sub-Components. — calculate_tsars","text":"data frame containing berth level observations including TSAR sub-components. following columns included: signal Signal ID. berth Berth ID. train_id Train ID. aspect Signal aspect berth entry. t_enters Date time berth entry. t_red_on Date time signal changing red. t_enters_next Date time entry next berth. t_vacates Date time vacating berth. t_red_off Date time signal changing red. TSAR Amount time signal spends red. T_onset Signal onset time train entry signal changing red. T_clear Amount time train takes clear berth. T_offset Signal offset time train exit signal changing red. T_travel Amount time train takes travel length berth. T_coach Amount time train takes travel length.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_tsars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate TSAR and Sub-Components. — calculate_tsars","text":"Combines valid track events filter_track_events() valid red signal events filter_aspect_events() calculate TSAR sub-components. data frame returned function contains first data can used analysis.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/calculate_tsars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate TSAR and Sub-Components. — calculate_tsars","text":"","code":"data(valid_track_events, valid_aspect_events, asset_map) valid_aspect_events #> # A tibble: 25,834 × 6 #>    signal dt                  aspect past_aspect window #>    <chr>  <dttm>              <fct>  <fct>        <int> #>  1 S1     2000-01-01 13:07:12 R      G                2 #>  2 S1     2000-01-01 13:09:36 Y      R                2 #>  3 S1     2000-01-01 13:10:11 YY     Y                2 #>  4 S1     2000-01-01 13:11:00 G      YY               2 #>  5 S1     2000-01-01 13:11:59 R      G                2 #>  6 S1     2000-01-01 13:13:02 Y      R                2 #>  7 S1     2000-01-01 13:13:44 YY     Y                2 #>  8 S1     2000-01-01 13:14:35 G      YY               2 #>  9 S1     2000-01-01 13:22:10 R      G                3 #> 10 S1     2000-01-01 13:22:58 Y      R                3 #> # ℹ 25,824 more rows #> # ℹ 1 more variable: interval <Interval> valid_track_events #> # A tibble: 24,332 × 6 #>    track dt                  occupied event   window #>    <chr> <dttm>              <lgl>    <chr>    <int> #>  1 TA-1  2000-01-01 13:07:11 TRUE     enters       2 #>  2 TA-1  2000-01-01 13:07:55 FALSE    vacates      2 #>  3 TA-1  2000-01-01 13:11:58 TRUE     enters       2 #>  4 TA-1  2000-01-01 13:12:34 FALSE    vacates      2 #>  5 TA-1  2000-01-01 13:22:09 TRUE     enters       3 #>  6 TA-1  2000-01-01 13:22:37 FALSE    vacates      3 #>  7 TA-1  2000-01-01 13:27:43 TRUE     enters       4 #>  8 TA-1  2000-01-01 13:28:14 FALSE    vacates      4 #>  9 TA-1  2000-01-01 14:07:06 TRUE     enters       7 #> 10 TA-1  2000-01-01 14:07:54 FALSE    vacates      7 #> # ℹ 24,322 more rows #> # ℹ 1 more variable: interval <Interval>  berth_events <- calculate_tsars(valid_track_events,                                 valid_aspect_events,                                 asset_map) berth_events #> # A tibble: 6,952 × 15 #>    signal berth train_id aspect t_enters            t_red_on            #>    <chr>  <chr>    <int> <fct>  <dttm>              <dttm>              #>  1 S1     A            1 G      2000-01-01 13:07:11 2000-01-01 13:07:12 #>  2 S2     B            1 G      2000-01-01 13:09:18 2000-01-01 13:09:19 #>  3 S3     C            1 G      2000-01-01 13:09:58 2000-01-01 13:09:59 #>  4 S4     D            1 G      2000-01-01 13:10:41 2000-01-01 13:10:42 #>  5 S5     E            1 G      2000-01-01 13:12:39 2000-01-01 13:12:39 #>  6 S6     F            1 G      2000-01-01 13:13:18 2000-01-01 13:13:19 #>  7 S7     G            1 G      2000-01-01 13:15:35 2000-01-01 13:15:35 #>  8 S8     H            1 G      2000-01-01 13:16:19 2000-01-01 13:16:20 #>  9 S1     A            2 G      2000-01-01 13:11:58 2000-01-01 13:11:59 #> 10 S2     B            2 YY     2000-01-01 13:12:43 2000-01-01 13:12:43 #> # ℹ 6,942 more rows #> # ℹ 9 more variables: t_enters_next <dttm>, t_vacates <dttm>, t_red_off <dttm>, #> #   TSAR <dbl>, T_onset <dbl>, T_clear <dbl>, T_offset <dbl>, T_travel <dbl>, #> #   T_coach <dbl>"},{"path":"https://sebmerricks.github.io/railvarr/reference/cluster_journeys.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster train journeys — cluster_journeys","title":"Cluster train journeys — cluster_journeys","text":"Clusters Centrix data groups based travel times across berths. function makes use K-means clustering, inherently non-deterministic. Therefore, output function always expected. recommended check output visually using plot_clusters(). reproducability, clusters ordered based total variance, highest variance first.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/cluster_journeys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster train journeys — cluster_journeys","text":"","code":"cluster_journeys(   berth_events,   outliers = NULL,   outlier_detection = \"none\",   ... )"},{"path":"https://sebmerricks.github.io/railvarr/reference/cluster_journeys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster train journeys — cluster_journeys","text":"berth_events data frame containing berth-level Centrix events containing columns: signal, berth, train_id, aspect, T_travel, time_elapsed. outliers data frame containing train IDs outliers. Ignored unless outlier_detection == \"manual\". outlier_detection approach use outliers. Options : \"none\" outliers removed. \"manual\" Manually remove outliers using outliers parameter. \"boxplot\" Unimplemented. ... Arguments passed stats::kmeans x numeric matrix data, object can coerced     matrix (numeric vector data frame     numeric columns). centers either number clusters, say \\(k\\), set     initial (distinct) cluster centres.  number, random set     (distinct) rows x chosen initial centres. iter.max maximum number iterations allowed. nstart centers number, many random sets     chosen? algorithm character: may abbreviated.  Note     \"Lloyd\" \"Forgy\" alternative names one     algorithm. trace logical integer number, currently used     default method (\"Hartigan-Wong\"): positive (true),     tracing information progress algorithm     produced.  Higher values may produce tracing information.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/cluster_journeys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster train journeys — cluster_journeys","text":"data frame containing columns: signalSignal ID berthBerth ID train_idTrain ID aspectSignal aspect train enters berth T_travelAmount time taken travel length berth clusterCluster ID","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/cluster_journeys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster train journeys — cluster_journeys","text":"","code":"data(berth_events) berth_events_clusters <- cluster_journeys(berth_events,                                           centers = 3L,                                           iter.max = 100L) plot_clusters(berth_events_clusters)"},{"path":"https://sebmerricks.github.io/railvarr/reference/dwell_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dwell times — dwell_times","title":"Example dwell times — dwell_times","text":"example data frame containing estimated dwell times","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/dwell_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dwell times — dwell_times","text":"","code":"dwell_times"},{"path":"https://sebmerricks.github.io/railvarr/reference/dwell_times.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dwell times — dwell_times","text":"signal Signal ID berth Berth ID station Station name train_id Train ID group Group name T_travel Berth travel time v_entry Velocity entry berth m/s a_brake Braking capacity m/s^2 L1 Distance start berth station v_exit Velocity exit berth m/s a_tract Acceleration m/s^2 L2 Distance station end berth T_brake Time spent braking S_brake Distance spent braking T_const_one Time spent moving constant speed braking station T_move_one Total time moving reaching station T_tract Time spent accelerating S_tract Distance spent accelerating T_const_two Time spent moving constant speed vacating berth T_move_two Total time moving leaving station T_dwell Dwell time station","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/dwell_times.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example dwell times — dwell_times","text":"data frame containing 1,581 rows 21 columns","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/dwell_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example dwell times — dwell_times","text":"","code":"dwell_times #> # A tibble: 1,581 × 21 #>    signal berth station train_id group     T_travel v_entry a_brake    L1 v_exit #>    <chr>  <chr> <chr>      <int> <chr>        <dbl>   <dbl>   <dbl> <dbl>  <dbl> #>  1 S1     A     geo110         1 stopping…     127.    23.5     0.4  585.   22.3 #>  2 S4     D     geo111         1 stopping…     118.    22.6     0.4  439.   22.4 #>  3 S6     F     geo112         1 stopping…     137.    22.4     0.4  514.   23.2 #>  4 S1     A     geo110         5 stopping…     128.    23.5     0.4  585.   21.8 #>  5 S4     D     geo111         5 stopping…     111.    21.4     0.4  439.   20.6 #>  6 S6     F     geo112         5 stopping…     141.    20.6     0.4  514.   23.7 #>  7 S1     A     geo110        11 stopping…     125.    23.5     0.4  585.   21.0 #>  8 S4     D     geo111        11 stopping…     111.    19.6     0.4  439.   20.6 #>  9 S6     F     geo112        11 stopping…     127.    20.6     0.4  514.   21.6 #> 10 S1     A     geo110        13 stopping…     110.    23.5     0.4  585.   22.3 #> # ℹ 1,571 more rows #> # ℹ 11 more variables: a_tract <dbl>, L2 <dbl>, T_brake <dbl>, S_brake <dbl>, #> #   T_const_one <dbl>, T_move_one <dbl>, T_tract <dbl>, S_tract <dbl>, #> #   T_const_two <dbl>, T_move_two <dbl>, T_dwell <dbl>"},{"path":"https://sebmerricks.github.io/railvarr/reference/estimate_berth_lengths.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate berth lengths — estimate_berth_lengths","title":"Estimate berth lengths — estimate_berth_lengths","text":"Estimate berth lengths","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/estimate_berth_lengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate berth lengths — estimate_berth_lengths","text":"","code":"estimate_berth_lengths(   timetable_specification,   id_matching,   berth_events_groups,   expected_journey_time,   track_length )"},{"path":"https://sebmerricks.github.io/railvarr/reference/estimate_berth_lengths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate berth lengths — estimate_berth_lengths","text":"timetable_specification Timetable specification id_matching Id matching berth_events_groups Berth events groups expected_journey_time Expected journey time seconds start Centrix track end track_length Total length Centrix track miles","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/estimate_dwell_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate dwell times — estimate_dwell_times","title":"Estimate dwell times — estimate_dwell_times","text":"function estimates dwell times Centrix data","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/estimate_dwell_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate dwell times — estimate_dwell_times","text":"","code":"estimate_dwell_times(   berth_events_groups,   berth_lengths,   station_names,   stopping_patterns,   a_brake,   a_tract,   station_berth_lengths = NULL )"},{"path":"https://sebmerricks.github.io/railvarr/reference/estimate_dwell_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate dwell times — estimate_dwell_times","text":"berth_events_groups Berth-level Centrix data berth_lengths Data frame 2 columns: berthBerth ID LBerth length metres station_names Data frame 2 columns: berthBerth ID stationStation name provides 1-1 mapping berth ID station name. station names correspond timetable stopping_patterns Data frame 2 columns: groupGroup name stationStation name provides list stations group stops . a_brake Braking capacity m/s^2 a_tract Acceleration m/s^2 station_berth_lengths (Optional) Data frame 3 columns: stationStation name L1Distance start berth station L2Distance station end berth station_berth_lengths NULL (default), L1 L2 equal berth length halved","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/estimate_dwell_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate dwell times — estimate_dwell_times","text":"Data frame 21 columns: signalSignal ID berthBerth ID stationStation name train_idTrain ID groupGroup name T_travelBerth travel time v_entryVelocity entry berth m/s a_brakeBraking capacity m/s^2 L1Distance start berth station v_exitVelocity exit berth m/s a_tractAcceleration m/s^2 L2Distance station end berth T_brakeTime spent braking S_brakeDistance spent braking T_const_oneTime spent moving constant speed braking station T_move_oneTotal time moving reaching station T_tractTime spent accelerating S_tractDistance spent accelerating T_const_twoTime spent moving constant speed vacating berth T_move_twoTotal time moving leaving station T_dwellDwell time station","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/estimate_dwell_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate dwell times — estimate_dwell_times","text":"","code":"data(berth_events_groups, berth_lengths)  # Set up station mapping station_names <- dplyr::tribble(   ~berth, ~station,   \"A\", \"geo110\",   \"D\", \"geo111\",   \"F\", \"geo112\" )  # Specify stopping patterns stopping_patterns <- dplyr::tribble(   ~group, ~station,   \"stopping-all\", \"geo110\",   \"stopping-all\", \"geo111\",   \"stopping-all\", \"geo112\",   \"stopping-geo112\", \"geo112\" )  # Define braking and accelerating capacities a_brake = 0.4 a_tract = 0.35  # Calculate dwell times dwell_times <- estimate_dwell_times(berth_events_groups,                                     berth_lengths,                                     station_names,                                     stopping_patterns,                                     a_brake,                                     a_tract)  # View dwell times dwell_times #> # A tibble: 1,581 × 21 #>    signal berth station train_id group     T_travel v_entry a_brake    L1 v_exit #>    <chr>  <chr> <chr>      <int> <chr>        <dbl>   <dbl>   <dbl> <dbl>  <dbl> #>  1 S1     A     geo110         1 stopping…     127.    23.5     0.4  585.   22.3 #>  2 S4     D     geo111         1 stopping…     118.    22.6     0.4  439.   22.4 #>  3 S6     F     geo112         1 stopping…     137.    22.4     0.4  514.   23.2 #>  4 S1     A     geo110         5 stopping…     128.    23.5     0.4  585.   21.8 #>  5 S4     D     geo111         5 stopping…     111.    21.4     0.4  439.   20.6 #>  6 S6     F     geo112         5 stopping…     141.    20.6     0.4  514.   23.7 #>  7 S1     A     geo110        11 stopping…     125.    23.5     0.4  585.   21.0 #>  8 S4     D     geo111        11 stopping…     111.    19.6     0.4  439.   20.6 #>  9 S6     F     geo112        11 stopping…     127.    20.6     0.4  514.   21.6 #> 10 S1     A     geo110        13 stopping…     110.    23.5     0.4  585.   22.3 #> # ℹ 1,571 more rows #> # ℹ 11 more variables: a_tract <dbl>, L2 <dbl>, T_brake <dbl>, S_brake <dbl>, #> #   T_const_one <dbl>, T_move_one <dbl>, T_tract <dbl>, S_tract <dbl>, #> #   T_const_two <dbl>, T_move_two <dbl>, T_dwell <dbl>  # Summarise dwell times # There are some negative values, which indicate outliers and potentially invalid observations summary(dwell_times$T_dwell) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  -50.25   14.82   21.67   29.08   33.13  113.56"},{"path":"https://sebmerricks.github.io/railvarr/reference/filter_aspect_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Centrix events by time intervals — filter_aspect_events","title":"Filter Centrix events by time intervals — filter_aspect_events","text":"Filter Centrix events occur within calculated valid time intervals. filter_track_events() filters tracks specified asset map. filter_aspect_events() filters signals specified asset map.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/filter_aspect_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Centrix events by time intervals — filter_aspect_events","text":"","code":"filter_aspect_events(aspect_events, time_windows, asset_map)  filter_track_events(track_events, time_windows, asset_map)"},{"path":"https://sebmerricks.github.io/railvarr/reference/filter_aspect_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Centrix events by time intervals — filter_aspect_events","text":"aspect_events data frame containing pre-processed aspect events columns: signal character() signal ID. dt lubridate::POSIXct() datetime. aspect factor() signal aspect train enters signal section. past_aspect factor() signal aspect train enters signal section. time_windows data frame containing window IDs time intervals columns: window numeric() window ID. interval lubridate::interval() time intervals. window indicates time interval data contain valid observations. asset_map data frame containing 1-1 mapping signals berths 1-many mapping berths tracks. map also contains 1-many mapping tracks events, reflecting fact 'enter' 'vacate' event track. Therefore, data frame adhere following structure: signal: character() vector containing signal ID. follow regex pattern \"S[0-9]+\". berth: character() vector containing berth ID. follow regex pattern \"[-Z]+\". track: character() vector containing track ID. follow regex pattern \"T[-Z]+(-[0-9])?\". event: character() vector containing event type. must one either \"enters\" \"vacates\". track_events data frame containing pre-processed track events columns: track character() track ID. dt lubridate::POSIXct() datetime. occcupied logical() TRUE train enters track, else FALSE. event character() 'enters' train enters track, else 'vacates'.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/filter_aspect_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Centrix events by time intervals — filter_aspect_events","text":"data frame containing filtered events, additional columns: window numeric() window ID. interval lubridate::interval() time interval.","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/filter_aspect_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Centrix events by time intervals — filter_aspect_events","text":"","code":"data(aspect_events, time_windows, asset_map) aspect_events #> # A tibble: 32,512 × 4 #>    signal dt                  aspect past_aspect #>    <chr>  <dttm>              <fct>  <fct>       #>  1 S1     2000-01-01 06:13:49 R      NA          #>  2 S1     2000-01-01 06:25:48 YY     R           #>  3 S1     2000-01-01 06:25:48 Y      YY          #>  4 S1     2000-01-01 06:25:53 R      Y           #>  5 S1     2000-01-01 06:26:16 YY     R           #>  6 S1     2000-01-01 06:26:16 Y      YY          #>  7 S1     2000-01-01 07:44:16 R      Y           #>  8 S1     2000-01-01 08:06:31 YY     R           #>  9 S1     2000-01-01 08:06:31 Y      YY          #> 10 S1     2000-01-01 08:20:08 R      Y           #> # ℹ 32,502 more rows valid_aspect_events <- filter_aspect_events(aspect_events,                                             time_windows,                                             asset_map) valid_aspect_events #> # A tibble: 25,834 × 6 #>    signal dt                  aspect past_aspect window #>    <chr>  <dttm>              <fct>  <fct>        <int> #>  1 S1     2000-01-01 13:07:12 R      G                2 #>  2 S1     2000-01-01 13:09:36 Y      R                2 #>  3 S1     2000-01-01 13:10:11 YY     Y                2 #>  4 S1     2000-01-01 13:11:00 G      YY               2 #>  5 S1     2000-01-01 13:11:59 R      G                2 #>  6 S1     2000-01-01 13:13:02 Y      R                2 #>  7 S1     2000-01-01 13:13:44 YY     Y                2 #>  8 S1     2000-01-01 13:14:35 G      YY               2 #>  9 S1     2000-01-01 13:22:10 R      G                3 #> 10 S1     2000-01-01 13:22:58 Y      R                3 #> # ℹ 25,824 more rows #> # ℹ 1 more variable: interval <Interval>  #----------------------------------------------------------------------------  data(track_events) track_events #> # A tibble: 25,242 × 4 #>    track dt                  occupied event   #>    <chr> <dttm>              <lgl>    <chr>   #>  1 TA-1  2000-01-01 06:13:48 TRUE     enters  #>  2 TA-1  2000-01-01 06:25:29 FALSE    vacates #>  3 TA-1  2000-01-01 06:25:31 TRUE     enters  #>  4 TA-1  2000-01-01 06:25:43 FALSE    vacates #>  5 TA-1  2000-01-01 06:25:52 TRUE     enters  #>  6 TA-1  2000-01-01 06:25:54 FALSE    vacates #>  7 TA-1  2000-01-01 06:25:57 TRUE     enters  #>  8 TA-1  2000-01-01 06:25:59 FALSE    vacates #>  9 TA-1  2000-01-01 06:26:02 TRUE     enters  #> 10 TA-1  2000-01-01 06:26:11 FALSE    vacates #> # ℹ 25,232 more rows valid_track_events <- filter_track_events(track_events,                                           time_windows,                                           asset_map) valid_track_events #> # A tibble: 24,332 × 6 #>    track dt                  occupied event   window #>    <chr> <dttm>              <lgl>    <chr>    <int> #>  1 TA-1  2000-01-01 13:07:11 TRUE     enters       2 #>  2 TA-1  2000-01-01 13:07:55 FALSE    vacates      2 #>  3 TA-1  2000-01-01 13:11:58 TRUE     enters       2 #>  4 TA-1  2000-01-01 13:12:34 FALSE    vacates      2 #>  5 TA-1  2000-01-01 13:22:09 TRUE     enters       3 #>  6 TA-1  2000-01-01 13:22:37 FALSE    vacates      3 #>  7 TA-1  2000-01-01 13:27:43 TRUE     enters       4 #>  8 TA-1  2000-01-01 13:28:14 FALSE    vacates      4 #>  9 TA-1  2000-01-01 14:07:06 TRUE     enters       7 #> 10 TA-1  2000-01-01 14:07:54 FALSE    vacates      7 #> # ℹ 24,322 more rows #> # ℹ 1 more variable: interval <Interval>"},{"path":"https://sebmerricks.github.io/railvarr/reference/filter_relevant_services.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter timetable to relevant trains — filter_relevant_services","title":"Filter timetable to relevant trains — filter_relevant_services","text":"filter_relevant_services() filters station, ignoring direction. filter_relevant_direction() filters station direction. assumed stations forward direction, .e., first element start track section last element end.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/filter_relevant_services.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter timetable to relevant trains — filter_relevant_services","text":"","code":"filter_relevant_services(timetable, stations)  filter_relevant_direction(timetable, stations)"},{"path":"https://sebmerricks.github.io/railvarr/reference/filter_relevant_services.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter timetable to relevant trains — filter_relevant_services","text":"timetable Data frame containing timetable data. Strict input validation performed. Must data frame following columns: train_headercharacter() Train identifier dt_originlubridate::POSIXct() Datetime train originated geocharacter() Name event location eventcharacter() Type event, must contain following values: Pass, Arrive, Depart, Originate, Terminate wttlubridate::POSIXct() Scheduled datetime event tlubridate::POSIXct() Actual datetime event delaynumeric() Difference actual time scheduled time event allownumeric() Timetabled delay allowance stations list TIPLOCs (geo) trains pass. list used work trains travel track section interest. example, fork track, trains can travel left right. want look trains turn left, stations include TIPLOCs interest situated along left track. trains pass TIPLOCs specified stations discarded.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/filter_relevant_services.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter timetable to relevant trains — filter_relevant_services","text":"filter_relevant_services returns (usually) smaller timetable containing trains pass stop specified stations. filter_relevant_direction returns (usually) smaller timetable containing trains pass stop specified stations given order.","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/filter_relevant_services.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter timetable to relevant trains — filter_relevant_services","text":"","code":"data(timetable, stations) timetable #> # A tibble: 8,958 × 11 #>    train_header dt_origin           geo    event     wtt                 #>    <chr>        <dttm>              <chr>  <chr>     <dttm>              #>  1 168H         2000-01-01 12:05:00 geo1   Originate 2000-01-01 12:20:00 #>  2 168H         2000-01-01 12:05:00 geo18  Arrive    2000-01-01 12:23:00 #>  3 168H         2000-01-01 12:05:00 geo18  Depart    2000-01-01 12:24:00 #>  4 168H         2000-01-01 12:05:00 geo2   Arrive    2000-01-01 12:28:00 #>  5 168H         2000-01-01 12:05:00 geo2   Depart    2000-01-01 12:29:00 #>  6 168H         2000-01-01 12:05:00 geo3   Arrive    2000-01-01 12:35:30 #>  7 168H         2000-01-01 12:05:00 geo3   Depart    2000-01-01 12:36:30 #>  8 168H         2000-01-01 12:05:00 geo104 Arrive    2000-01-01 12:39:00 #>  9 168H         2000-01-01 12:05:00 geo104 Depart    2000-01-01 12:39:30 #> 10 168H         2000-01-01 12:05:00 geo4   Arrive    2000-01-01 12:41:30 #> # ℹ 8,948 more rows #> # ℹ 6 more variables: t <dttm>, delay <dbl>, allow <dbl>, allow_perf <dbl>, #> #   allow_path <dbl>, allow_eng <dbl> timetable_services <- filter_relevant_services(timetable, stations) timetable_services #> # A tibble: 881 × 11 #>    train_header dt_origin           geo    event  wtt                 #>    <chr>        <dttm>              <chr>  <chr>  <dttm>              #>  1 151H         2000-01-01 12:42:00 geo5   Arrive 2000-01-01 13:25:00 #>  2 151H         2000-01-01 12:42:00 geo5   Depart 2000-01-01 13:26:00 #>  3 108H         2000-01-01 12:55:00 geo5   Arrive 2000-01-01 13:34:00 #>  4 108H         2000-01-01 12:55:00 geo5   Depart 2000-01-01 13:35:30 #>  5 108H         2000-01-01 12:55:00 geo6   Pass   2000-01-01 13:37:30 #>  6 108H         2000-01-01 12:55:00 geo110 Arrive 2000-01-01 13:39:00 #>  7 108H         2000-01-01 12:55:00 geo110 Depart 2000-01-01 13:39:30 #>  8 108H         2000-01-01 12:55:00 geo111 Arrive 2000-01-01 13:42:00 #>  9 108H         2000-01-01 12:55:00 geo111 Depart 2000-01-01 13:42:30 #> 10 108H         2000-01-01 12:55:00 geo112 Arrive 2000-01-01 13:44:30 #> # ℹ 871 more rows #> # ℹ 6 more variables: t <dttm>, delay <dbl>, allow <dbl>, allow_perf <dbl>, #> #   allow_path <dbl>, allow_eng <dbl> timetable_direction <- filter_relevant_direction(timetable, stations) timetable_direction #> # A tibble: 792 × 11 #> # Groups:   train_header, dt_origin [123] #>    train_header dt_origin           geo    event  wtt                 #>    <chr>        <dttm>              <chr>  <chr>  <dttm>              #>  1 108H         2000-01-01 12:55:00 geo5   Arrive 2000-01-01 13:34:00 #>  2 108H         2000-01-01 12:55:00 geo5   Depart 2000-01-01 13:35:30 #>  3 108H         2000-01-01 12:55:00 geo6   Pass   2000-01-01 13:37:30 #>  4 108H         2000-01-01 12:55:00 geo110 Arrive 2000-01-01 13:39:00 #>  5 108H         2000-01-01 12:55:00 geo110 Depart 2000-01-01 13:39:30 #>  6 108H         2000-01-01 12:55:00 geo111 Arrive 2000-01-01 13:42:00 #>  7 108H         2000-01-01 12:55:00 geo111 Depart 2000-01-01 13:42:30 #>  8 108H         2000-01-01 12:55:00 geo112 Arrive 2000-01-01 13:44:30 #>  9 108H         2000-01-01 12:55:00 geo112 Depart 2000-01-01 13:45:00 #> 10 108H         2000-01-01 12:55:00 geo7   Arrive 2000-01-01 13:48:00 #> # ℹ 782 more rows #> # ℹ 6 more variables: t <dttm>, delay <dbl>, allow <dbl>, allow_perf <dbl>, #> #   allow_path <dbl>, allow_eng <dbl>"},{"path":"https://sebmerricks.github.io/railvarr/reference/find_calling_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Find calling patterns from timetable — find_calling_patterns","title":"Find calling patterns from timetable — find_calling_patterns","text":"Find calling patterns timetable","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/find_calling_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find calling patterns from timetable — find_calling_patterns","text":"","code":"find_calling_patterns(timetable, stopping_stations)"},{"path":"https://sebmerricks.github.io/railvarr/reference/find_calling_patterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find calling patterns from timetable — find_calling_patterns","text":"timetable Data frame containing timetable data. Strict input validation performed. Must data frame following columns: train_headercharacter() Train identifier dt_originlubridate::POSIXct() Datetime train originated geocharacter() Name event location eventcharacter() Type event, must contain following values: Pass, Arrive, Depart, Originate, Terminate wttlubridate::POSIXct() Scheduled datetime event tlubridate::POSIXct() Actual datetime event delaynumeric() Difference actual time scheduled time event allownumeric() Timetabled delay allowance stopping_stations subset stations, specifies TIPLOCs trains can stop . used calculating calling patterns. Therefore, train stop stations specified stopping_stations labeled 'fast' train. Trains stop stations labeled 'stopping-', specific stations stop attached suffixes. example, train stops 'geo10', calling pattern labeled 'stopping-geo10'.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/find_calling_patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find calling patterns from timetable — find_calling_patterns","text":"timetable calling patterns added.","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/find_calling_patterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find calling patterns from timetable — find_calling_patterns","text":"","code":"data(timetable, stations, stopping_stations) calling_patterns <- timetable |>                       filter_relevant_direction(stations) |>                       find_calling_patterns(stopping_stations) calling_patterns[,c(\"train_header\", \"dt_origin\", \"geo\", \"event\", \"group\")] #> # A tibble: 792 × 5 #>    train_header dt_origin           geo    event  group        #>    <chr>        <dttm>              <chr>  <chr>  <chr>        #>  1 108H         2000-01-01 12:55:00 geo5   Arrive stopping-all #>  2 108H         2000-01-01 12:55:00 geo5   Depart stopping-all #>  3 108H         2000-01-01 12:55:00 geo6   Pass   stopping-all #>  4 108H         2000-01-01 12:55:00 geo110 Arrive stopping-all #>  5 108H         2000-01-01 12:55:00 geo110 Depart stopping-all #>  6 108H         2000-01-01 12:55:00 geo111 Arrive stopping-all #>  7 108H         2000-01-01 12:55:00 geo111 Depart stopping-all #>  8 108H         2000-01-01 12:55:00 geo112 Arrive stopping-all #>  9 108H         2000-01-01 12:55:00 geo112 Depart stopping-all #> 10 108H         2000-01-01 12:55:00 geo7   Arrive stopping-all #> # ℹ 782 more rows"},{"path":"https://sebmerricks.github.io/railvarr/reference/id_matching.html","id":null,"dir":"Reference","previous_headings":"","what":"Example ID Matching — id_matching","title":"Example ID Matching — id_matching","text":"Data frame containing matched Centrix timetable IDs","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/id_matching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example ID Matching — id_matching","text":"","code":"id_matching"},{"path":"https://sebmerricks.github.io/railvarr/reference/id_matching.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example ID Matching — id_matching","text":"train_id Centrix train ID train_header Timetable ID dt_origin Datetime train originated","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/id_matching.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example ID Matching — id_matching","text":"Data frame 42 rows 3 columns","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/is_aspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is of class aspect — is_aspect","title":"Check if object is of class aspect — is_aspect","text":"Check object class aspect","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/is_aspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is of class aspect — is_aspect","text":"","code":"is_aspect(x)"},{"path":"https://sebmerricks.github.io/railvarr/reference/is_aspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is of class aspect — is_aspect","text":"x Object check","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/match_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Match Centrix and Timetable IDs — match_ids","title":"Match Centrix and Timetable IDs — match_ids","text":"match_ids() matches Centrix observations timetabling information. result data set contains 1-1 mapping Centrix IDs timetable IDs. necessary step timings used timetable rounded nearest 30 seconds, resulting much lower granularity. may also inaccuracies timetable. function results data loss, amount depends accurate matching needs .","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/match_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match Centrix and Timetable IDs — match_ids","text":"","code":"match_ids(berth_events_groups, timetable_groups, match_mapping)"},{"path":"https://sebmerricks.github.io/railvarr/reference/match_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match Centrix and Timetable IDs — match_ids","text":"berth_events_groups Data frame containing berth-level Centrix data. structure expected conform following: berthcharacter() Berth ID train_idnumeric() Train ID t_enterslubridate::POSIXct() Date time train enters berth t_vacateslubridate::POSIXct() Date time train vacates berth groupcharacter() Group name, corresponding train's calling pattern timetable_groups Data frame containing Timetable data. structure expected conform following: train_headercharacter() Train ID dt_originlubridate::POSIXct() Date time service originated groupcharacter() Group name, corresponding train's calling pattern geocharacter() Name TIPLOCs trains pass stop eventcharacter() Type timetable event, e.g., 'Arrive', 'Depart', 'Pass' wttlubridate::POSIXct() Scheduled date time event tlubridate::POSIXct() Actual date time event match_mapping Data frame containing instructions matching. match following structure: groupcharacter() Group name, corresponding train's calling pattern berthcharacter() Berth ID geocharacter() Name TIPLOC(s) station(s) match lbnumeric() Number seconds shift start matching window ubnumeric() Number seconds shift end matching window","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/match_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match Centrix and Timetable IDs — match_ids","text":"Data frame containing 1-1 mapping Centrix IDs Timetable IDs.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/match_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match Centrix and Timetable IDs — match_ids","text":"two methods matching Centrix data timetable data. method used depends whether train fast train (stop stations present Centrix data set) . fast trains, matches must found nearest TIPLOC, e.g., junction preceding Centrix track section. trains, lb ub columns match_mapping control considered match. train passed junction time t_Pass train entered Centrix track time t_enters, match made : t_Pass > t_enters + lb & t_Pass < t_enters + ub  .e., match made train passed junction less lb seconds t_enters (assuming lb negative) train passed junction earlier t_enters + ub. Thus, lb ub define time window based t_enters t_Pass must occur match made. stopping trains, matches can made stations, conceptually simpler. take example train stops one station. train enters station's berth time t_enters, arrives station t_Arrive, departs station t_Depart vacates berth time t_vacates. match made : t_enters + lb < t_Arrive & t_Depart < t_vacates + ub  .e., match made train arrives station enters berth train departs station vacates berth. Similar fast trains, t_enters t_vacates define time window t_Arrive t_Depart must occur match made. window can adjusted using lb ub.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/match_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match Centrix and Timetable IDs — match_ids","text":"","code":"# Define the matching instructions data(berth_events_groups, timetable_groups) match_mapping <- dplyr::tribble(   ~group, ~berth, ~geo, ~lb, ~ub,   # match fast trains at berth \"A\" and geo \"geo6\"   # move start of window 240 seconds before `t_enters`   # move end of window 60 seconds after `t_enters`   \"fast\", \"A\", \"geo6\", -240, 60,   # match stopping-all trains at berths \"A\",\"D\",\"F\", and geos \"geo110\",\"geo111\",\"geo112\"   # don't adjust window   \"stopping-all\", \"A\", \"geo110\", 0, 0,   \"stopping-all\", \"D\", \"geo111\", 0, 0,   \"stopping-all\", \"F\", \"geo112\", 0, 0 ) matched_ids <- match_ids(berth_events_groups, timetable_groups, match_mapping) matched_ids #> # A tibble: 42 × 3 #>    train_id train_header dt_origin           #>       <int> <chr>        <dttm>              #>  1        5 109H         2000-01-01 13:25:00 #>  2        6 46H          2000-01-01 13:36:00 #>  3        9 185H         2000-01-01 13:52:00 #>  4       10 1H           2000-01-01 14:00:00 #>  5       12 16H          2000-01-01 14:15:00 #>  6       13 111H         2000-01-01 14:25:00 #>  7       14 47H          2000-01-01 14:39:00 #>  8       15 186H         2000-01-01 14:52:00 #>  9       15 2H           2000-01-01 15:00:00 #> 10       16 112H         2000-01-01 14:55:00 #> # ℹ 32 more rows  match_mapping <- dplyr::tribble(   ~group, ~berth, ~geo, ~lb, ~ub,   \"fast\", \"A\", \"geo6\", -240, 60,   # move start of window for stopping-all trains to 60 seconds before `t_enters`   \"stopping-all\", \"A\", \"geo110\", -60, 0,   \"stopping-all\", \"D\", \"geo111\", -60, 0,   \"stopping-all\", \"F\", \"geo112\", -60, 0 ) wider_window <- match_ids(berth_events_groups, timetable_groups, match_mapping) # More matches are found with the wider window wider_window #> # A tibble: 45 × 3 #>    train_id train_header dt_origin           #>       <int> <chr>        <dttm>              #>  1        5 109H         2000-01-01 13:25:00 #>  2        6 46H          2000-01-01 13:36:00 #>  3        9 185H         2000-01-01 13:52:00 #>  4       10 1H           2000-01-01 14:00:00 #>  5       11 110H         2000-01-01 13:55:00 #>  6       12 16H          2000-01-01 14:15:00 #>  7       13 111H         2000-01-01 14:25:00 #>  8       14 47H          2000-01-01 14:39:00 #>  9       15 186H         2000-01-01 14:52:00 #> 10       15 2H           2000-01-01 15:00:00 #> # ℹ 35 more rows"},{"path":"https://sebmerricks.github.io/railvarr/reference/plot_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clustered train journeys — plot_clusters","title":"Plot clustered train journeys — plot_clusters","text":"Plot clustered train journeys","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/plot_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clustered train journeys — plot_clusters","text":"","code":"plot_clusters(cluster_events)"},{"path":"https://sebmerricks.github.io/railvarr/reference/plot_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clustered train journeys — plot_clusters","text":"cluster_events Data frame matching output cluster_journeys()","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/plot_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot clustered train journeys — plot_clusters","text":"","code":"data(berth_events) berth_events_clusters <- cluster_journeys(berth_events,                                           centers = 3L,                                           iter.max = 100L) plot_clusters(berth_events_clusters)"},{"path":"https://sebmerricks.github.io/railvarr/reference/preprocess_signal_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw Centrix data — preprocess_signal_events","title":"Preprocess raw Centrix data — preprocess_signal_events","text":"preprocess_signal_events() handles signals, defined raw_centrix$asset starting character 'S'. preprocess_track_events() handles tracks, defined raw_centrix$asset starting character 'T'.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/preprocess_signal_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw Centrix data — preprocess_signal_events","text":"","code":"preprocess_signal_events(raw_centrix, asset_map, state_map)  preprocess_track_events(raw_centrix, asset_map)"},{"path":"https://sebmerricks.github.io/railvarr/reference/preprocess_signal_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw Centrix data — preprocess_signal_events","text":"raw_centrix data frame containing raw Centrix data. Strict input validation applied ensure data adhere expected structure. data data frame following columns: asset: character() vector containing asset ID. Tracks expected follow regex pattern \"T[-Z]+(-[0-9])?\". E.g., 'TABC' 'TABC-1' 'TABC-2'. Signals expected follow regex pattern \"S[0-9]+\\s[-Z]+\". E.g., 'S123 HGE' 'S123 '. second part signal ID state code referring signal aspect, e.g. 'RGE' red 'DGE' green. codes see: https://wiki.openraildata.com/index.php/Signalling_Nomenclature#Signals. dt: lubridate::POSIXct() object representing date time observation made. transition: character() vector representing state transition caused observation. transition can one \"DN\" \"DN \", anything else ignored. tracks, \"DN\" signifies train entering track, \"DN \" train vacating track. signals, \"DN\" represents aspect change. Therefore, signals \"DN \" transition ignored. asset_map data frame containing 1-1 mapping signals berths 1-many mapping berths tracks. map also contains 1-many mapping tracks events, reflecting fact 'enter' 'vacate' event track. Therefore, data frame adhere following structure: signal: character() vector containing signal ID. follow regex pattern \"S[0-9]+\". berth: character() vector containing berth ID. follow regex pattern \"[-Z]+\". track: character() vector containing track ID. follow regex pattern \"T[-Z]+(-[0-9])?\". event: character() vector containing event type. must one either \"enters\" \"vacates\". state_map data frame containing 1-1 mapping signal state signal aspect. See state_mapping (default) expected structure.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/preprocess_signal_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw Centrix data — preprocess_signal_events","text":"preprocess_signal_events returns data frame containing aspect events columns: signal character() signal ID. dt lubridate::POSIXct() datetime. aspect factor() signal aspect caused event. past_aspect factor() signal aspect preceding event. preprocess_track_events returns data frame containing track events columns: track character() track ID. dt lubridate::POSIXct() datetime. occcupied logical() TRUE train enters track, else FALSE. event character() 'enters' train enters track, else 'vacates'.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/preprocess_signal_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preprocess raw Centrix data — preprocess_signal_events","text":"preprocess_signal_events() converts raw_centrix$asset signal ID signal state, latter converted signal aspect using state_map.. preprocess_track_events() converts raw_centrix$transition track entry exit events.","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/preprocess_signal_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw Centrix data — preprocess_signal_events","text":"","code":"data(raw_centrix, asset_map, state_mapping) raw_centrix #> # A tibble: 110,339 × 3 #>    asset   dt                  transition #>    <chr>   <dttm>              <chr>      #>  1 TA-1 TR 2000-01-01 06:13:48 UP to DN   #>  2 S1 HHGE 2000-01-01 06:13:49 UP to DN   #>  3 S1 HGE  2000-01-01 06:13:49 UP to DN   #>  4 S1 RGE  2000-01-01 06:13:49 DN to UP   #>  5 TA-1 TR 2000-01-01 06:25:29 DN to UP   #>  6 TA-1 TR 2000-01-01 06:25:31 UP to DN   #>  7 TA-1 TR 2000-01-01 06:25:43 DN to UP   #>  8 S1 HHGE 2000-01-01 06:25:48 DN to UP   #>  9 S1 HGE  2000-01-01 06:25:48 DN to UP   #> 10 S1 RGE  2000-01-01 06:25:48 UP to DN   #> # ℹ 110,329 more rows aspect_events <- preprocess_signal_events(raw_centrix,                                           asset_map,                                           state_mapping) aspect_events #> # A tibble: 32,512 × 4 #>    signal dt                  aspect past_aspect #>    <chr>  <dttm>              <fct>  <fct>       #>  1 S1     2000-01-01 06:13:49 R      NA          #>  2 S1     2000-01-01 06:25:48 YY     R           #>  3 S1     2000-01-01 06:25:48 Y      YY          #>  4 S1     2000-01-01 06:25:53 R      Y           #>  5 S1     2000-01-01 06:26:16 YY     R           #>  6 S1     2000-01-01 06:26:16 Y      YY          #>  7 S1     2000-01-01 07:44:16 R      Y           #>  8 S1     2000-01-01 08:06:31 YY     R           #>  9 S1     2000-01-01 08:06:31 Y      YY          #> 10 S1     2000-01-01 08:20:08 R      Y           #> # ℹ 32,502 more rows  #----------------------------------------------------------------------------  data(raw_centrix, asset_map) raw_centrix #> # A tibble: 110,339 × 3 #>    asset   dt                  transition #>    <chr>   <dttm>              <chr>      #>  1 TA-1 TR 2000-01-01 06:13:48 UP to DN   #>  2 S1 HHGE 2000-01-01 06:13:49 UP to DN   #>  3 S1 HGE  2000-01-01 06:13:49 UP to DN   #>  4 S1 RGE  2000-01-01 06:13:49 DN to UP   #>  5 TA-1 TR 2000-01-01 06:25:29 DN to UP   #>  6 TA-1 TR 2000-01-01 06:25:31 UP to DN   #>  7 TA-1 TR 2000-01-01 06:25:43 DN to UP   #>  8 S1 HHGE 2000-01-01 06:25:48 DN to UP   #>  9 S1 HGE  2000-01-01 06:25:48 DN to UP   #> 10 S1 RGE  2000-01-01 06:25:48 UP to DN   #> # ℹ 110,329 more rows track_events <- preprocess_track_events(raw_centrix,                                         asset_map) track_events #> # A tibble: 25,242 × 4 #>    track dt                  occupied event   #>    <chr> <dttm>              <lgl>    <chr>   #>  1 TA-1  2000-01-01 06:13:48 TRUE     enters  #>  2 TA-1  2000-01-01 06:25:29 FALSE    vacates #>  3 TA-1  2000-01-01 06:25:31 TRUE     enters  #>  4 TA-1  2000-01-01 06:25:43 FALSE    vacates #>  5 TA-1  2000-01-01 06:25:52 TRUE     enters  #>  6 TA-1  2000-01-01 06:25:54 FALSE    vacates #>  7 TA-1  2000-01-01 06:25:57 TRUE     enters  #>  8 TA-1  2000-01-01 06:25:59 FALSE    vacates #>  9 TA-1  2000-01-01 06:26:02 TRUE     enters  #> 10 TA-1  2000-01-01 06:26:11 FALSE    vacates #> # ℹ 25,232 more rows"},{"path":"https://sebmerricks.github.io/railvarr/reference/railvarr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"railvarr: Rail Network Performance Variability Analysis — railvarr-package","title":"railvarr: Rail Network Performance Variability Analysis — railvarr-package","text":"Provide functionality aid pre-processing analysis railway data, goal analysing network performance variability.","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/railvarr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"railvarr: Rail Network Performance Variability Analysis — railvarr-package","text":"Maintainer: Sebastian Merricks b8072600@newcastle.ac.uk","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/railvarr_berth.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — railvarr_berth","title":"Internal vctrs methods — railvarr_berth","text":"Internal vctrs methods","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/raw_centrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Centrix data — raw_centrix","title":"Example Centrix data — raw_centrix","text":"example data frame containing raw Centrix data. real data containing 15 days Centrix data. data anonymised.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/raw_centrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Centrix data — raw_centrix","text":"","code":"raw_centrix"},{"path":"https://sebmerricks.github.io/railvarr/reference/raw_centrix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Centrix data — raw_centrix","text":"asset Centrix asset ID, signal assets include state data dt Date time event transition Event transition data","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/raw_centrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Centrix data — raw_centrix","text":"data frame containing 110,339 rows 3 columns.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/raw_centrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Centrix data — raw_centrix","text":"","code":"raw_centrix #> # A tibble: 110,339 × 3 #>    asset   dt                  transition #>    <chr>   <dttm>              <chr>      #>  1 TA-1 TR 2000-01-01 06:13:48 UP to DN   #>  2 S1 HHGE 2000-01-01 06:13:49 UP to DN   #>  3 S1 HGE  2000-01-01 06:13:49 UP to DN   #>  4 S1 RGE  2000-01-01 06:13:49 DN to UP   #>  5 TA-1 TR 2000-01-01 06:25:29 DN to UP   #>  6 TA-1 TR 2000-01-01 06:25:31 UP to DN   #>  7 TA-1 TR 2000-01-01 06:25:43 DN to UP   #>  8 S1 HHGE 2000-01-01 06:25:48 DN to UP   #>  9 S1 HGE  2000-01-01 06:25:48 DN to UP   #> 10 S1 RGE  2000-01-01 06:25:48 UP to DN   #> # ℹ 110,329 more rows"},{"path":"https://sebmerricks.github.io/railvarr/reference/signal_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new signal event object — signal_event","title":"Create new signal event object — signal_event","text":"Create new signal event object","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/signal_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new signal event object — signal_event","text":"","code":"signal_event(   signal_id = character(),   datetime = lubridate::POSIXct(),   previous_aspect = aspect(),   new_aspect = aspect() )"},{"path":"https://sebmerricks.github.io/railvarr/reference/signal_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new signal event object — signal_event","text":"signal_id Signal ID datetime Datetime previous_aspect Previous aspect new_aspect New aspect","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/state_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Default signal state to aspect mapping — state_mapping","title":"Default signal state to aspect mapping — state_mapping","text":"default 1-1 mapping signal state aspect. See https://wiki.openraildata.com/index.php/Signalling_Nomenclature#Signals. used default state mapping Centrix wrangling.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/state_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default signal state to aspect mapping — state_mapping","text":"","code":"state_mapping"},{"path":"https://sebmerricks.github.io/railvarr/reference/state_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default signal state to aspect mapping — state_mapping","text":"state Signal state aspect Signal aspect factor","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/state_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default signal state to aspect mapping — state_mapping","text":"data frame 4 rows 2 columns.","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/state_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default signal state to aspect mapping — state_mapping","text":"","code":"state_mapping #> # A tibble: 4 × 2 #>   state aspect #>   <chr> <fct>  #> 1 RGE   R      #> 2 HGE   Y      #> 3 HHGE  YY     #> 4 DGE   G"},{"path":"https://sebmerricks.github.io/railvarr/reference/stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Example stations — stations","title":"Example stations — stations","text":"List example stations. used timetable wrangling","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example stations — stations","text":"","code":"stations"},{"path":"https://sebmerricks.github.io/railvarr/reference/stations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example stations — stations","text":"object class list length 6.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/stations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example stations — stations","text":"list 6 elements.","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/stations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example stations — stations","text":"","code":"stations #> [[1]] #> [1] \"geo5\" #>  #> [[2]] #> [1] \"geo6\" #>  #> [[3]] #> [1] \"geo110\" #>  #> [[4]] #> [1] \"geo111\" #>  #> [[5]] #> [1] \"geo112\" #>  #> [[6]] #> [1] \"geo7\" \"geo8\" #>"},{"path":"https://sebmerricks.github.io/railvarr/reference/stopping_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Example stopping stations — stopping_stations","title":"Example stopping stations — stopping_stations","text":"List containing stations trains stop. used finding calling patterns","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/stopping_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example stopping stations — stopping_stations","text":"","code":"stopping_stations"},{"path":"https://sebmerricks.github.io/railvarr/reference/stopping_stations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example stopping stations — stopping_stations","text":"object class list length 3.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/stopping_stations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example stopping stations — stopping_stations","text":"list 3 elements.","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/stopping_stations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example stopping stations — stopping_stations","text":"","code":"stopping_stations #> [[1]] #> [1] \"geo110\" #>  #> [[2]] #> [1] \"geo111\" #>  #> [[3]] #> [1] \"geo112\" #>"},{"path":"https://sebmerricks.github.io/railvarr/reference/time_windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Example time windows — time_windows","title":"Example time windows — time_windows","text":"example time windows calculated Centrix data denoting time intervals valid train journeys.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/time_windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example time windows — time_windows","text":"","code":"time_windows"},{"path":"https://sebmerricks.github.io/railvarr/reference/time_windows.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example time windows — time_windows","text":"window Window ID interval Window time interval","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/time_windows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example time windows — time_windows","text":"data frame containing 681 rows 2 columns","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/time_windows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example time windows — time_windows","text":"","code":"time_windows #> # A tibble: 681 × 2 #>    window interval                                         #>     <int> <Interval>                                       #>  1      2 2000-01-01 13:07:11 UTC--2000-01-01 13:21:32 UTC #>  2      3 2000-01-01 13:22:09 UTC--2000-01-01 13:26:10 UTC #>  3      4 2000-01-01 13:27:43 UTC--2000-01-01 13:32:27 UTC #>  4      7 2000-01-01 14:07:06 UTC--2000-01-01 14:20:32 UTC #>  5      8 2000-01-01 14:26:30 UTC--2000-01-01 14:33:18 UTC #>  6      9 2000-01-01 14:34:54 UTC--2000-01-01 14:54:57 UTC #>  7     10 2000-01-01 15:06:54 UTC--2000-01-01 15:20:53 UTC #>  8     11 2000-01-01 15:37:57 UTC--2000-01-01 15:50:21 UTC #>  9     12 2000-01-01 16:07:15 UTC--2000-01-01 16:17:10 UTC #> 10     13 2000-01-01 16:37:04 UTC--2000-01-01 16:49:11 UTC #> # ℹ 671 more rows"},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable.html","id":null,"dir":"Reference","previous_headings":"","what":"Example timetable data — timetable","title":"Example timetable data — timetable","text":"Raw timetable data example. anonymised version real data set.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example timetable data — timetable","text":"","code":"timetable"},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example timetable data — timetable","text":"train_header Train ID. usually contains headcode information dt_origin Date time service origin geo Name TIPLOCs trains pass stop event Type timetable event, e.g., 'Arrive', 'Depart', 'Pass' wtt Scheduled date time event t Actual date time event delay Difference actual time scheduled time allow Total delay allowance allow_perf Performance allowance allow_path Pathing allowance allow_eng Engineering allowance","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example timetable data — timetable","text":"data frame 8,958 rows 11 columns","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example timetable data — timetable","text":"","code":"timetable #> # A tibble: 8,958 × 11 #>    train_header dt_origin           geo    event     wtt                 #>    <chr>        <dttm>              <chr>  <chr>     <dttm>              #>  1 168H         2000-01-01 12:05:00 geo1   Originate 2000-01-01 12:20:00 #>  2 168H         2000-01-01 12:05:00 geo18  Arrive    2000-01-01 12:23:00 #>  3 168H         2000-01-01 12:05:00 geo18  Depart    2000-01-01 12:24:00 #>  4 168H         2000-01-01 12:05:00 geo2   Arrive    2000-01-01 12:28:00 #>  5 168H         2000-01-01 12:05:00 geo2   Depart    2000-01-01 12:29:00 #>  6 168H         2000-01-01 12:05:00 geo3   Arrive    2000-01-01 12:35:30 #>  7 168H         2000-01-01 12:05:00 geo3   Depart    2000-01-01 12:36:30 #>  8 168H         2000-01-01 12:05:00 geo104 Arrive    2000-01-01 12:39:00 #>  9 168H         2000-01-01 12:05:00 geo104 Depart    2000-01-01 12:39:30 #> 10 168H         2000-01-01 12:05:00 geo4   Arrive    2000-01-01 12:41:30 #> # ℹ 8,948 more rows #> # ℹ 6 more variables: t <dttm>, delay <dbl>, allow <dbl>, allow_perf <dbl>, #> #   allow_path <dbl>, allow_eng <dbl>"},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of a wrangled timetable — timetable_groups","title":"Example of a wrangled timetable — timetable_groups","text":"Timetable containing relevant services travelling single direction calling patterns labelled.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of a wrangled timetable — timetable_groups","text":"","code":"timetable_groups"},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_groups.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of a wrangled timetable — timetable_groups","text":"train_header Train ID. usually contains headcode information dt_origin Date time service origin geo Name TIPLOCs trains pass stop event Type timetable event, e.g., 'Arrive', 'Depart', 'Pass' wtt Scheduled date time event t Actual date time event delay Difference actual time scheduled time allow Total delay allowance allow_perf Performance allowance allow_path Pathing allowance allow_eng Engineering allowance group Group name corresponding calling pattern","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example of a wrangled timetable — timetable_groups","text":"data frame 792 rows 12 columns","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_specification.html","id":null,"dir":"Reference","previous_headings":"","what":"Example timetable specification — timetable_specification","title":"Example timetable specification — timetable_specification","text":"Timetable specification containing information expected journey times","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_specification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example timetable specification — timetable_specification","text":"","code":"timetable_specification"},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_specification.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example timetable specification — timetable_specification","text":"train_header Train ID. usually contains headcode information dt_origin Date time service origin wtt Scheduled date time event group Group name xi Start point xk End point duration Scheduled time xi xk type Type travel, moving dwell j Segment ID T_journey Total journey time across track section","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_specification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example timetable specification — timetable_specification","text":"Data frame 281 rows 10 columns","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_specification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example timetable specification — timetable_specification","text":"","code":"timetable_specification #> # A tibble: 281 × 10 #>    train_header dt_origin           wtt                 group        xi    xk    #>    <chr>        <dttm>              <dttm>              <chr>        <chr> <chr> #>  1 108H         2000-01-01 12:55:00 2000-01-01 13:39:00 stopping-all geo6  geo1… #>  2 108H         2000-01-01 12:55:00 2000-01-01 13:39:30 stopping-all geo1… geo1… #>  3 108H         2000-01-01 12:55:00 2000-01-01 13:42:00 stopping-all geo1… geo1… #>  4 108H         2000-01-01 12:55:00 2000-01-01 13:42:30 stopping-all geo1… geo1… #>  5 108H         2000-01-01 12:55:00 2000-01-01 13:44:30 stopping-all geo1… geo1… #>  6 108H         2000-01-01 12:55:00 2000-01-01 13:45:00 stopping-all geo1… geo1… #>  7 108H         2000-01-01 12:55:00 2000-01-01 13:48:00 stopping-all geo1… geo7  #>  8 108H         2000-01-01 12:55:00 2000-01-01 13:49:00 stopping-all geo7  geo7  #>  9 109H         2000-01-01 13:25:00 2000-01-01 14:09:00 stopping-all geo6  geo1… #> 10 109H         2000-01-01 13:25:00 2000-01-01 14:09:30 stopping-all geo1… geo1… #> # ℹ 271 more rows #> # ℹ 4 more variables: duration <Duration>, type <chr>, j <int>, T_journey <dbl>"},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Example timetable subset — timetable_subset","title":"Example timetable subset — timetable_subset","text":"Example timetable subset","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example timetable subset — timetable_subset","text":"","code":"timetable_subset"},{"path":"https://sebmerricks.github.io/railvarr/reference/timetable_subset.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example timetable subset — timetable_subset","text":"object class tbl_df (inherits tbl, data.frame) 792 rows 12 columns.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/track_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new track event — track_event","title":"Create new track event — track_event","text":"Create new track event","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/track_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new track event — track_event","text":"","code":"track_event(   track_id = character(),   datetime = lubridate::POSIXct(),   event_type = character() )"},{"path":"https://sebmerricks.github.io/railvarr/reference/track_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new track event — track_event","text":"track_id Track ID datetime Datetime event_type Event type ('enters'/'vacates')","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/track_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Example track events — track_events","title":"Example track events — track_events","text":"example Centrix data pre-processed track events.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/track_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example track events — track_events","text":"","code":"track_events"},{"path":"https://sebmerricks.github.io/railvarr/reference/track_events.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example track events — track_events","text":"track Track ID dt Date time event occupied TRUE train enters track, else FALSE event 'enters' train enters track, else 'vacates'","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/track_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example track events — track_events","text":"data frame containing 25,242 rows 4 columns.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/track_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example track events — track_events","text":"","code":"track_events #> # A tibble: 25,242 × 4 #>    track dt                  occupied event   #>    <chr> <dttm>              <lgl>    <chr>   #>  1 TA-1  2000-01-01 06:13:48 TRUE     enters  #>  2 TA-1  2000-01-01 06:25:29 FALSE    vacates #>  3 TA-1  2000-01-01 06:25:31 TRUE     enters  #>  4 TA-1  2000-01-01 06:25:43 FALSE    vacates #>  5 TA-1  2000-01-01 06:25:52 TRUE     enters  #>  6 TA-1  2000-01-01 06:25:54 FALSE    vacates #>  7 TA-1  2000-01-01 06:25:57 TRUE     enters  #>  8 TA-1  2000-01-01 06:25:59 FALSE    vacates #>  9 TA-1  2000-01-01 06:26:02 TRUE     enters  #> 10 TA-1  2000-01-01 06:26:11 FALSE    vacates #> # ℹ 25,232 more rows"},{"path":"https://sebmerricks.github.io/railvarr/reference/valid_aspect_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of processed aspect events — valid_aspect_events","title":"Example of processed aspect events — valid_aspect_events","text":"example aspect events fully processed validated calculated time windows.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/valid_aspect_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of processed aspect events — valid_aspect_events","text":"","code":"valid_aspect_events"},{"path":"https://sebmerricks.github.io/railvarr/reference/valid_aspect_events.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of processed aspect events — valid_aspect_events","text":"signal Signal ID dt Date time event aspect Signal aspect caused event past_aspect Signal aspect preceding event window Window ID interval Window interval","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/valid_aspect_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example of processed aspect events — valid_aspect_events","text":"data frame containing 25,834 rows 6 columns","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/valid_track_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of processed track events — valid_track_events","title":"Example of processed track events — valid_track_events","text":"example track events fully processed validated calculated time windows.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/valid_track_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of processed track events — valid_track_events","text":"","code":"valid_track_events"},{"path":"https://sebmerricks.github.io/railvarr/reference/valid_track_events.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of processed track events — valid_track_events","text":"track Track ID dt Date time event occupied TRUE train enters track, else FALSE event 'enters' train enters track, else 'vacates' window Window ID interval Window interval","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/valid_track_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example of processed track events — valid_track_events","text":"data frame containing 24,332 rows 6 columns","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/wrangle_centrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrangle Raw Centrix Data — wrangle_centrix","title":"Wrangle Raw Centrix Data — wrangle_centrix","text":"function takes raw Centrix data input returns fully processed data frame containing berth-level signal track observations, along calculations TSAR subcomponents.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/wrangle_centrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrangle Raw Centrix Data — wrangle_centrix","text":"","code":"wrangle_centrix(raw_centrix, asset_map, state_map = state_mapping)"},{"path":"https://sebmerricks.github.io/railvarr/reference/wrangle_centrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrangle Raw Centrix Data — wrangle_centrix","text":"raw_centrix data frame containing raw Centrix data. Strict input validation applied ensure data adhere expected structure. data data frame following columns: asset: character() vector containing asset ID. Tracks expected follow regex pattern \"T[-Z]+(-[0-9])?\". E.g., 'TABC' 'TABC-1' 'TABC-2'. Signals expected follow regex pattern \"S[0-9]+\\s[-Z]+\". E.g., 'S123 HGE' 'S123 '. second part signal ID state code referring signal aspect, e.g. 'RGE' red 'DGE' green. codes see: https://wiki.openraildata.com/index.php/Signalling_Nomenclature#Signals. dt: lubridate::POSIXct() object representing date time observation made. transition: character() vector representing state transition caused observation. transition can one \"DN\" \"DN \", anything else ignored. tracks, \"DN\" signifies train entering track, \"DN \" train vacating track. signals, \"DN\" represents aspect change. Therefore, signals \"DN \" transition ignored. asset_map data frame containing 1-1 mapping signals berths 1-many mapping berths tracks. map also contains 1-many mapping tracks events, reflecting fact 'enter' 'vacate' event track. Therefore, data frame adhere following structure: signal: character() vector containing signal ID. follow regex pattern \"S[0-9]+\". berth: character() vector containing berth ID. follow regex pattern \"[-Z]+\". track: character() vector containing track ID. follow regex pattern \"T[-Z]+(-[0-9])?\". event: character() vector containing event type. must one either \"enters\" \"vacates\". state_map data frame containing 1-1 mapping signal state signal aspect. See state_mapping (default) expected structure.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/wrangle_centrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrangle Raw Centrix Data — wrangle_centrix","text":"data frame containing fully processed Centrix data, containing berth-level information signal track events. includes TSARs sub-components, e.g. 'T_travel' 'T_offset'.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/wrangle_centrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrangle Raw Centrix Data — wrangle_centrix","text":"function wraps: preprocess_signal_events() preprocess_track_events() calculate_time_windows() filter_aspect_events() filter_track_events() calculate_tsars()","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/wrangle_centrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrangle Raw Centrix Data — wrangle_centrix","text":"","code":"data(raw_centrix, asset_map) raw_centrix #> # A tibble: 110,339 × 3 #>    asset   dt                  transition #>    <chr>   <dttm>              <chr>      #>  1 TA-1 TR 2000-01-01 06:13:48 UP to DN   #>  2 S1 HHGE 2000-01-01 06:13:49 UP to DN   #>  3 S1 HGE  2000-01-01 06:13:49 UP to DN   #>  4 S1 RGE  2000-01-01 06:13:49 DN to UP   #>  5 TA-1 TR 2000-01-01 06:25:29 DN to UP   #>  6 TA-1 TR 2000-01-01 06:25:31 UP to DN   #>  7 TA-1 TR 2000-01-01 06:25:43 DN to UP   #>  8 S1 HHGE 2000-01-01 06:25:48 DN to UP   #>  9 S1 HGE  2000-01-01 06:25:48 DN to UP   #> 10 S1 RGE  2000-01-01 06:25:48 UP to DN   #> # ℹ 110,329 more rows berth_events <- wrangle_centrix(raw_centrix, asset_map) berth_events #> # A tibble: 6,952 × 15 #>    signal berth train_id aspect t_enters            t_red_on            #>    <chr>  <chr>    <int> <fct>  <dttm>              <dttm>              #>  1 S1     A            1 G      2000-01-01 13:07:11 2000-01-01 13:07:12 #>  2 S2     B            1 G      2000-01-01 13:09:18 2000-01-01 13:09:19 #>  3 S3     C            1 G      2000-01-01 13:09:58 2000-01-01 13:09:59 #>  4 S4     D            1 G      2000-01-01 13:10:41 2000-01-01 13:10:42 #>  5 S5     E            1 G      2000-01-01 13:12:39 2000-01-01 13:12:39 #>  6 S6     F            1 G      2000-01-01 13:13:18 2000-01-01 13:13:19 #>  7 S7     G            1 G      2000-01-01 13:15:35 2000-01-01 13:15:35 #>  8 S8     H            1 G      2000-01-01 13:16:19 2000-01-01 13:16:20 #>  9 S1     A            2 G      2000-01-01 13:11:58 2000-01-01 13:11:59 #> 10 S2     B            2 YY     2000-01-01 13:12:43 2000-01-01 13:12:43 #> # ℹ 6,942 more rows #> # ℹ 9 more variables: t_enters_next <dttm>, t_vacates <dttm>, t_red_off <dttm>, #> #   TSAR <dbl>, T_onset <dbl>, T_clear <dbl>, T_offset <dbl>, T_travel <dbl>, #> #   T_coach <dbl>"},{"path":"https://sebmerricks.github.io/railvarr/reference/wrangle_timetable.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrangle Timetable Data — wrangle_timetable","title":"Wrangle Timetable Data — wrangle_timetable","text":"wrapper timetable processing functions filter_relevant_services(), filter_relevant_direction(), find_calling_patterns().","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/wrangle_timetable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrangle Timetable Data — wrangle_timetable","text":"","code":"wrangle_timetable(timetable, stations, stopping_stations)"},{"path":"https://sebmerricks.github.io/railvarr/reference/wrangle_timetable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrangle Timetable Data — wrangle_timetable","text":"timetable Data frame containing timetable data. Strict input validation performed. Must data frame following columns: train_headercharacter() Train identifier dt_originlubridate::POSIXct() Datetime train originated geocharacter() Name event location eventcharacter() Type event, must contain following values: Pass, Arrive, Depart, Originate, Terminate wttlubridate::POSIXct() Scheduled datetime event tlubridate::POSIXct() Actual datetime event delaynumeric() Difference actual time scheduled time event allownumeric() Timetabled delay allowance stations list TIPLOCs (geo) trains pass. list used work trains travel track section interest. example, fork track, trains can travel left right. want look trains turn left, stations include TIPLOCs interest situated along left track. trains pass TIPLOCs specified stations discarded. stopping_stations subset stations, specifies TIPLOCs trains can stop . used calculating calling patterns. Therefore, train stop stations specified stopping_stations labeled 'fast' train. Trains stop stations labeled 'stopping-', specific stations stop attached suffixes. example, train stops 'geo10', calling pattern labeled 'stopping-geo10'.","code":""},{"path":"https://sebmerricks.github.io/railvarr/reference/wrangle_timetable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrangle Timetable Data — wrangle_timetable","text":"subset timetable contains trains pass specified stations given order. Time zone set \"UTC\".","code":""},{"path":[]},{"path":"https://sebmerricks.github.io/railvarr/reference/wrangle_timetable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrangle Timetable Data — wrangle_timetable","text":"","code":"data(timetable, stations, stopping_stations) timetable #> # A tibble: 8,958 × 11 #>    train_header dt_origin           geo    event     wtt                 #>    <chr>        <dttm>              <chr>  <chr>     <dttm>              #>  1 168H         2000-01-01 12:05:00 geo1   Originate 2000-01-01 12:20:00 #>  2 168H         2000-01-01 12:05:00 geo18  Arrive    2000-01-01 12:23:00 #>  3 168H         2000-01-01 12:05:00 geo18  Depart    2000-01-01 12:24:00 #>  4 168H         2000-01-01 12:05:00 geo2   Arrive    2000-01-01 12:28:00 #>  5 168H         2000-01-01 12:05:00 geo2   Depart    2000-01-01 12:29:00 #>  6 168H         2000-01-01 12:05:00 geo3   Arrive    2000-01-01 12:35:30 #>  7 168H         2000-01-01 12:05:00 geo3   Depart    2000-01-01 12:36:30 #>  8 168H         2000-01-01 12:05:00 geo104 Arrive    2000-01-01 12:39:00 #>  9 168H         2000-01-01 12:05:00 geo104 Depart    2000-01-01 12:39:30 #> 10 168H         2000-01-01 12:05:00 geo4   Arrive    2000-01-01 12:41:30 #> # ℹ 8,948 more rows #> # ℹ 6 more variables: t <dttm>, delay <dbl>, allow <dbl>, allow_perf <dbl>, #> #   allow_path <dbl>, allow_eng <dbl> timetable_subset <- wrangle_timetable(timetable, stations, stopping_stations) timetable_subset #> # A tibble: 792 × 12 #>    train_header dt_origin           geo    event  wtt                 #>    <chr>        <dttm>              <chr>  <chr>  <dttm>              #>  1 108H         2000-01-01 12:55:00 geo5   Arrive 2000-01-01 13:34:00 #>  2 108H         2000-01-01 12:55:00 geo5   Depart 2000-01-01 13:35:30 #>  3 108H         2000-01-01 12:55:00 geo6   Pass   2000-01-01 13:37:30 #>  4 108H         2000-01-01 12:55:00 geo110 Arrive 2000-01-01 13:39:00 #>  5 108H         2000-01-01 12:55:00 geo110 Depart 2000-01-01 13:39:30 #>  6 108H         2000-01-01 12:55:00 geo111 Arrive 2000-01-01 13:42:00 #>  7 108H         2000-01-01 12:55:00 geo111 Depart 2000-01-01 13:42:30 #>  8 108H         2000-01-01 12:55:00 geo112 Arrive 2000-01-01 13:44:30 #>  9 108H         2000-01-01 12:55:00 geo112 Depart 2000-01-01 13:45:00 #> 10 108H         2000-01-01 12:55:00 geo7   Arrive 2000-01-01 13:48:00 #> # ℹ 782 more rows #> # ℹ 7 more variables: t <dttm>, delay <dbl>, allow <dbl>, allow_perf <dbl>, #> #   allow_path <dbl>, allow_eng <dbl>, group <chr>"}]
